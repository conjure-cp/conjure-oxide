name: Nightly CI

# Nightly CI.
#
# If the repo has changed over the last 24 hours, check that Conjure Oxide
# clean builds on all platforms, create an updated nightly release, and run
# some longer CI jobs.
#
# Nightly Releases
# ===============
#
# `build_nightly` builds Conjure Oxide on all platforms and prepares release
# archives.
#
#
# If builds pass on all platform, the nightly release and tag is updated to the
# current HEAD by the `create_release` job, and the release archives uploaded;
# otherwise, it is left unchanged. This ensures that there is always a build of
# Conjure Oxide for each platform in the releases tab.
#
# The contents of each release are described in the Build Artifacts section
# below.
#
# Build Artifacts
# ---------------
#
# For each platform, this CI creates the following archives:
#
#   - conjure-oxide-nightly-PLATFORM-standalone.zip - just conjure oxide
#   - conjure-oxide-nightly-PLATFORM-with-conjure.zip - just conjure oxide and conjure
#   - conjure-oxide-nightly-PLATFORM-with-solvers.zip - conjure oxide,
#   conjure, savilerow, and all solvers (as provided by conjure's with-solvers
#   release)
#
# Valid values of PLATFORM are:
#
#     - aarch64-darwin
#     - x86_64-linux-gnu
#     - x86_64-darwin
#
# Linux builds are performed in a manylinux (github.com/pypa/manylinux)
# container to ensure compatibility with the older glibc versions, such as
# those found in RHEL/Alma and Debian. For more details, see the Dockerfile.
#
# We don't support aarch64-linux-gnu yet as Conjure does not provide a release
# for it.

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write


jobs:
  # check if anything has happened in the repo today
  #
  # https://stackoverflow.com/a/67527144
  check_date:
    runs-on: ubuntu-22.04
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4

      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours" ${{ github.sha }}) && echo "::set-output name=should_run::false" &&  gh run list -b main -w Test -L 1 --json conclusion | jq '.[].conclusion == "success"'


  # From https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
  publish_container:
    name: Publish Container (conjure-oxide:nightly)
    runs-on: ubuntu-latest
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container
      # registry registry using the account and password that will publish the
      # packages. Once published, the packages are scoped to the account
      # defined here.
      #
      - name: Log in to the Container registry
        uses: docker/login-action@6d4b68b490aef8836e8fb5e50ee7b3bdfa5894f0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # This step uses
        # [docker/metadata-action](https://github.com/docker/metadata-action#about)
        # to extract tags and labels that will be applied to the specified image. The
        # `id` "meta" allows the output of this step to be referenced in a subsequent
        # step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            nightly
            type=sha

      # This step uses the `docker/build-push-action` action to build the
      # image, based on your repository's `Dockerfile`. If the build
      # succeeds, it pushes the image to GitHub Packages. It uses the `context`
      # parameter to define the build's context as the set of files located in the
      # specified path. For more information, see
      # [Usage](https://github.com/docker/build-push-action#usage) in the README of
      # the `docker/build-push-action` repository. It uses the `tags` and `labels`
      # parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false


  # From https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
  publish_build_container:
    name: Publish Container (conjure-oxide:build-environment-nightly)
    runs-on: ubuntu-latest
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container
      # registry registry using the account and password that will publish the
      # packages. Once published, the packages are scoped to the account
      # defined here.
      #
      - name: Log in to the Container registry
        uses: docker/login-action@6d4b68b490aef8836e8fb5e50ee7b3bdfa5894f0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # This step uses
        # [docker/metadata-action](https://github.com/docker/metadata-action#about)
        # to extract tags and labels that will be applied to the specified image. The
        # `id` "meta" allows the output of this step to be referenced in a subsequent
        # step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            # no latest tag
            latest=false
            prefix=build-environment-

          tags: |
            nightly

      # This step uses the `docker/build-push-action` action to build the
      # image, based on your repository's `Dockerfile`. If the build
      # succeeds, it pushes the image to GitHub Packages. It uses the `context`
      # parameter to define the build's context as the set of files located in the
      # specified path. For more information, see
      # [Usage](https://github.com/docker/build-push-action#usage) in the README of
      # the `docker/build-push-action` repository. It uses the `tags` and `labels`
      # parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: .
          push: true
          target: build-environment
          provenance: false


  build_nightly_mac:
    name: "Build Nightly (${{ matrix.arch_name }}-${{ matrix.os_name }})"
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-13         # x86_64 mac
          - macos-latest     # aarch64 mac

        # platform and arch info for naming the binary
        include:
          - os: macos-13
            os_name: darwin
            arch_name: x86_64
            conjure_prefix: macos-intel

          - os: macos-latest
            os_name: darwin
            arch_name: aarch64
            conjure_prefix: macos-arm


    runs-on: ${{ matrix.os }}
    env:
      release_prefix: "${{ matrix.arch_name }}-${{ matrix.os_name }}-conjure-oxide-nightly"
      conjure_version: 2.5.1

    steps:
      - uses: actions/checkout@v4

      - name: Install rust
        run: rustup update stable && rustup default stable

      - name: Test
        run: |
          cargo test --release

      - name: Build release
        run: |
          cargo build --release -p conjure_oxide
          mkdir -p bin # place to store all the different stuff we want to add to the release
          cp target/release/conjure_oxide bin

      - name: Download Conjure release
        if: ${{ !(matrix.arch_name == 'aarch64' && matrix.os_name == 'linux-gnu') }}
        run: |
          CONJURE_FOLDER="conjure-v${{ env.conjure_version }}-${{ matrix.conjure_prefix }}-with-solvers"
          CONJURE_ZIP="${CONJURE_FOLDER}.zip"

          wget "https://github.com/conjure-cp/conjure/releases/download/v${{ env.conjure_version }}/${CONJURE_ZIP}"
          unzip -d bin ${CONJURE_ZIP}
          mv bin/${CONJURE_FOLDER}/* bin/
          rm -rf bin/${CONJURE_FOLDER}

      - name: Prepare releases
        run: |
          mkdir dist

          cd bin
          zip "../dist/${{ env.release_prefix }}-standalone.zip" conjure_oxide
          zip "../dist/${{ env.release_prefix }}-with-conjure.zip" conjure_oxide conjure
          zip "../dist/${{ env.release_prefix }}-with-solvers.zip" *
          cd ..

      - name: Save builds
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.release_prefix }}
          path: dist/*.zip

  build_nightly_linux:
    name: "Build Nightly (x86_64-linux-gnu)"
    needs:
      - check_date
      - publish_build_container
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    runs-on: ubuntu-latest
    container: "ghcr.io/${{ github.repository}}:build-environment-nightly"
    env:
      release_prefix: "x86_64-linux-gnu-conjure-oxide-nightly"
      conjure_prefix: "linux"
      conjure_version: 2.5.1

    steps:
      - name: Align with container ownership
        run: chown root:root .

      - uses: actions/checkout@v4

      - name: Test
        run: |
          cargo test --release

      - name: Build release
        run: |
          cargo build --release -p conjure_oxide
          mkdir -p bin # place to store all the different stuff we want to add to the release
          cp target/release/conjure_oxide bin

      - name: Download Conjure release
        run: |
          CONJURE_FOLDER="conjure-v${{ env.conjure_version }}-${{ env.conjure_prefix }}-with-solvers"
          CONJURE_ZIP="${CONJURE_FOLDER}.zip"

          wget "https://github.com/conjure-cp/conjure/releases/download/v${{ env.conjure_version }}/${CONJURE_ZIP}"
          unzip -d bin ${CONJURE_ZIP}
          mv bin/${CONJURE_FOLDER}/* bin/
          rm -rf bin/${CONJURE_FOLDER}

      - name: Prepare releases
        run: |
          mkdir dist

          cd bin
          zip "../dist/${{ env.release_prefix }}-standalone.zip" conjure_oxide
          zip "../dist/${{ env.release_prefix }}-with-conjure.zip" conjure_oxide conjure
          zip "../dist/${{ env.release_prefix }}-with-solvers.zip" *
          cd ..

      - name: Save builds
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.release_prefix }}
          path: dist/*.zip

  create_release:
    runs-on: ubuntu-latest
    name: Create release
    needs:
      - build_nightly_mac
      - build_nightly_linux
    steps:
      - uses: actions/checkout@v4
      - run: mkdir dist

      # download all artifacts made in this workflow (i.e. all the different builds)
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true # put all releases in the same folder
          path: dist/

      - name: Publish nightly release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"

          # delete nightly tag
          git push --delete origin nightly  || true

          # create new nightly tag
          git tag nightly -am "Nightly release: $(date -I)"
          git push origin nightly

          # create release
          gh release delete nightly || true # ensure release doesn't exist (don't fail if it doesn't, as it may not!)
          gh release create nightly --notes-from-tag --prerelease --title "nightly ($(date -I))" --verify-tag dist/*.zip

