name: "Test"

on:
  push:
    branches:
      - main # run for pushes to the main branch. other branches need to create a PR if they want testing.
    paths:
      - crates/**
      - tests-integration/**
      - Cargo.*
      - rust-toolchain.toml
      - .github/workflows/test.yml
      - .github/workflows/code-coverage-deploy.yml
  pull_request:
    paths:
      - crates/**
      - tests-integration/**
      - Cargo.*
      - rust-toolchain.toml
      - .github/workflows/test.yml
      - .github/workflows/code-coverage-deploy.yml
  workflow_dispatch:

env:
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  SCCACHE_GHA_VERSION: 5
  CARGO_INCREMENTAL: "0"
  # we define the following 3 values as the defaults here, matrix jobs may overwrite their values.
  os: ubuntu-latest
  rust_release: stable
  compiler_profile: debug

jobs:
  build-and-test:
    name: "Test"
    timeout-minutes: 120
    strategy:
      # run all combinations of the matrix even if one combination fails.
      fail-fast: false
      matrix:
        compiler_profile:
          - release
          - debug
        rust_release:
          - stable
          - nightly
        conjure_version:
          - 2.5.1
        os:
          - ubuntu-latest
          - macos-latest
        include:
          - os: ubuntu-latest
            release_suffix: linux
          - os: macos-latest
            release_suffix: macos-intel

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: ${{ matrix.os }}--${{ matrix.rust_release }}--${{ matrix.compiler_profile }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      # Override RUSTUP_TOOLCHAIN to nightly when we are testing with nightly
      # This value is read from the rust-toolchain.toml file otherwise
      - name: Set RUSTUP_TOOLCHAIN
        if: matrix.rust_release == 'nightly'
        run: echo "RUSTUP_TOOLCHAIN=nightly" >> $GITHUB_ENV

      - run: rustup update ${{ matrix.rust_release }} && rustup default ${{ matrix.rust_release }}

      - run: cargo build -vv --workspace
        if: matrix.compiler_profile == 'debug'

      - run: cargo build -vv --release --workspace
        if: matrix.compiler_profile == 'release'

      - uses: ./.github/actions/install-conjure
        with:
          os_arch: ${{ matrix.release_suffix }}
          version: ${{ matrix.conjure_version }}

      - run: cargo test --workspace
        if: matrix.compiler_profile == 'debug'

      - run: cargo test --workspace --release
        if: matrix.compiler_profile == 'release'

  examples:
    name: "Examples"
    timeout-minutes: 120
    strategy:
      # run all combinations of the matrix even if one combination fails.
      fail-fast: false
      matrix:
        rust_release:
          - stable
          - nightly
        os:
          - ubuntu-latest
          - macos-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: ${{ matrix.os }}--${{ matrix.rust_release }}--${{ env.compiler_profile }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      # Override RUSTUP_TOOLCHAIN to nightly when we are testing with nightly
      # This value is read from the rust-toolchain.toml file otherwise
      - name: Set RUSTUP_TOOLCHAIN
        if: matrix.rust_release == 'nightly'
        run: echo "RUSTUP_TOOLCHAIN=nightly" >> $GITHUB_ENV

      - run: rustup update ${{ matrix.rust_release }} && rustup default ${{ matrix.rust_release }}

      - run: cargo build -vv --workspace --examples

  audit:
    name: "Audit"
    runs-on: ubuntu-latest
    strategy:
      # run all combinations of the matrix even if one combination fails.
      fail-fast: false
      matrix:
        rust_release:
          - stable
          - nightly
    steps:
      - uses: actions/checkout@v5

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: ${{ env.os }}--${{ matrix.rust_release }}--${{ env.compiler_profile }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - run: rustup update ${{ matrix.rust_release }} && rustup default ${{ matrix.rust_release }}

      - run: cargo install cargo-audit

      - run: cargo audit

  shear:
    name: "No unused dependencies (cargo shear)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: ${{ env.os }}--${{ env.rust_release }}--${{ env.compiler_profile }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install cargo-shear
        run: cargo +nightly install cargo-shear

      - name: Run cargo shear
        run: RUSTC_WRAPPER="" cargo +nightly shear --expand
