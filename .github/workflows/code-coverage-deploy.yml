name: "Code and Documentation Coverage (Deploy)"
# see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/

on:
  workflow_run:
    workflows: ["Coverage (PR)"]
    types:
      - completed


# see https://github.com/JamesIves/github-pages-deploy-action/tree/dev
permissions:
  contents: write

env:
  rust_release: nightly

jobs:
  deploy-coverage:
    name: "Info: Code Coverage"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set shas
        id: sha
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const {data: callee_run } = await github.rest.actions.getWorkflowRun({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            console.log(callee_run);

            // from manual inspection in jq, seems to hold head.sha for PR, not
            // whatever GITHUB_SHA is.
            return callee_run.head_sha;


      - name: Download artifact
        uses: dawidd6/action-download-artifact@v9
        with:
          name: code-coverage-${{ steps.sha.outputs.result }}
          workflow: code-coverage.yml
          path: ./deploy

      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./deploy
          target-folder: "coverage/${{ steps.sha.outputs.result }}"
          branch: gh-pages
          commit-message: "Actions: Code Coverage for ${{ steps.sha.outputs.result }}"

  indexes:
    needs: deploy-coverage
    name: "Regenerate indexes for coverage"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Checkout the pages repository
        uses: actions/checkout@v4
        with:
          ref: "gh-pages"
          path: "pages"

      - name: Set shas
        id: sha
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const {data: callee_run } = await github.rest.actions.getWorkflowRun({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            console.log(callee_run);
            return callee_run.head_sha;

      - name: "Generate indexes"
        run: |
          ./tools/ci/genindex.py pages/coverage/

      - uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./pages/coverage/
          target-folder: ./coverage/
          branch: gh-pages
          commit-message: "Actions: Update coverage indexes"

  comment:
    permissions: write-all
    needs: deploy-coverage
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
            solvers/minion/vendor
            solvers/chuffed/vendor

          key: ${{ runner.os }}-${{ env.rust_release }}-${{ github.event.repository.updated_at }}
          restore-keys: ${{ runner.os }}-${{ env.rust_release }}

      - name: Set shas
        id: sha
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const {data: callee_run } = await github.rest.actions.getWorkflowRun({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            console.log(callee_run);

            // from manual inspection in jq, seems to hold head.sha for PR, not
            // whatever GITHUB_SHA is.
            return callee_run.head_sha;

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v9
        with:
          name: code-coverage-${{ steps.sha.outputs.result }}
          workflow: code-coverage.yml
          path: ./deploy

      - name: Get PR number
        id: prnum
        run: |
          echo "num=$(cat deploy/prnumber)" > $GITHUB_OUTPUT

      - name: Retrieve list of artifacts for the PR
        id: find_artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const prNum = process.env.num;
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            // Filter artifacts by PR number in their name
            const artifactList = artifacts.data.artifacts.filter(artifact => artifact.name.includes(`coverage-${prNum}-`));
            return artifactList.map((artifact) => ({
              id: artifact.id,
              name: artifact.name,
              created_at: artifact.created_at
            }));

      # WARNING: Artifacts are deleted after 90 days (or per configured retention policy)
      - name: Find previous artifact
        id: previous-artifact
        if: steps.find_artifacts.outputs.result != '[]'
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            // parse the output from the previous step into a JSON array
            previous_artifacts = ${{ fromJson(steps.find_artifacts.outputs.result) }}

            // assuming filtered and sorted the previous_artifacts by creation date in descending order
            if (previous_artifacts.length > 1) {
              // get the second latest artifact (since the latest would be the current one)
              return previous_artifacts[1].id
            }

      - run: |
          echo "previous_artifact_id=${{steps.previous-artifact.outputs.result}}" >> $GITHUB_ENV

      - name: Install rust ${{ env.rust_release }}
        run: rustup update ${{ env.rust_release }} && rustup default ${{ env.rust_release }}

      - name: Generate lcov summary for main and pr
        continue-on-error: true
        id: lcov
        run: |
          sudo apt-get install -y lcov
          wget https://${{github.repository_owner}}.github.io/conjure-oxide/coverage/main/lcov.info
          lcov --summary lcov.info > cov.txt
          echo "main<<EOFABC" >> $GITHUB_OUTPUT
          echo "$(cat cov.txt | tail -n +3)" >> $GITHUB_OUTPUT
          echo 'EOFABC' >> $GITHUB_OUTPUT

          lcov --summary ./deploy/lcov.info > cov.txt
          echo "pr<<EOFABC" >> $GITHUB_OUTPUT
          echo "$(cat cov.txt | tail -n +3)" >> $GITHUB_OUTPUT
          echo 'EOFABC' >> $GITHUB_OUTPUT

      - name: Download doc coverage summary for PR
        uses: dawidd6/action-download-artifact@v9
        with:
          workflow: code-coverage.yml
          pr: ${{steps.prnum.outputs.num}}
          name: pr-doc-coverage-summary

      - name: Download doc coverage summary for main
        uses: dawidd6/action-download-artifact@v9
        with:
          workflow: code-coverage-main.yml
          branch: main
          name: main-doc-coverage-summary
 

      - name: Get doc coverage links for main and PR
        run: | 
          # url of run, to use for summary
          # the api call returns the url of the job which does not show the summary, so we change it to the run url instead, which does.
          MAIN_URL=$(gh api -X GET -F 'filter=latest' -F 'status=completed' -F 'check_name=Documentation Coverage' \
            -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/conjure-cp/conjure-oxide/commits/main/check-runs |\
            jq '.check_runs[0] | .html_url | split("/")[0:-2] | join("/")')

          PR_URL=$(gh api -X GET -F 'filter=latest' -F 'status=completed' -F 'check_name=Documentation' \
            -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/conjure-cp/conjure-oxide/commits/${{steps.sha.outputs.result}}/check-runs |\
            jq '.check_runs[0] | .html_url | split("/")[0:-2] | join("/")')

          echo "MAIN_DOC_URL=$MAIN_URL" >> $GITHUB_ENV
          echo "PR_DOC_URL=$PR_URL" >> $GITHUB_ENV
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Find coverage comment
        uses: peter-evans/find-comment@v3
        continue-on-error: true
        id: fc
        with:
          issue-number: ${{steps.prnum.outputs.num}}
          comment-author: "github-actions[bot]"
          body-includes: "## Documentation Coverage"

      - name: Delete coverage comment if it exists
        if: steps.fc.outputs.comment-id != ''
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.fc.outputs.comment-id }}
            })

      - name: Download the previous lcov.info (historical) file
        if: steps.find_artifacts.outputs.result != '[]'
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-${{ steps.prnum.outputs.num}}-${{ env.previous_artifact_id }}
          path: ./tools/code-coverage-diff/deploy-prev

      # this will be used for future visualizations in the coverage report (requiring external python libs)
      - name: Install python dependencies
        run: |
          python3 -m pip install -r tools/code-coverage-diff/requirements.txt

      - name: Calculate current coverage difference PR <> main
        id: coveragediff
        run: |

          mkdir -p ./tools/code-coverage-diff/lcov
          mkdir -p ./tools/code-coverage-diff/deploy-prev

          # pipeline lcov relevant stats to python script
          python3 ./tools/code-coverage-diff/calculate_coverage_difference.py "${{ steps.lcov.outputs.main }}" "${{ steps.lcov.outputs.pr }}" > ./tools/code-coverage-diff/lcov/coverage_diff.txt

          # store into environment variable
          {
          echo 'diff<<EOFABC'
          cat ./tools/code-coverage-diff/lcov/coverage_diff.txt
          echo 'EOFABC'
          } >> "$GITHUB_ENV"


      - name: Calculate coverage difference with previous historical lcov artifact
        if: steps.find_artifacts.outputs.result != '[]'
        id: historicalcoveragediff
        run: |
          # create summary of previous (historical) lcov summary for main and pr
          lcov --summary ./tools/code-coverage-diff/deploy-prev/code-coverage-${{ steps.prnum.outputs.num }}-${{ env.previous_artifact_id }} > historical_coverage_lcov.txt
          {
            echo "hist_main_summary<<EOFABC"
            cat historical_coverage_lcov.txt | tail -n +3
            echo "EOFABC"
          } >> "$GITHUB_ENV"

          # call python script to compare historical previous main coverage with current main coverage
          python3 ./tools/code-coverage-diff/calculate_coverage_difference.py "${{ steps.lcov.outputs.main }}" "${{ env.hist_main_summary }}" > ./tools/code-coverage-diff/lcov/hist_coverage_diff.txt

          # store into output variable for comment display
          {
          echo 'hist_diff<<EOFABC'
          cat ./tools/code-coverage-diff/lcov/hist_coverage_diff.txt
          echo EOFABC
          }  >> "$GITHUB_ENV"

      - run: |
          {
          echo 'MAIN_DOC_COVERAGE_SUMMARY<<EOFABC' 
          cat main-doc-coverage-summary.txt
          echo "EOFABC"
          }>> $GITHUB_ENV

      - run: |
          {
          echo 'PR_DOC_COVERAGE_SUMMARY<<EOFABC' 
          cat pr-doc-coverage-summary.txt
          echo "EOFABC"
          }>> $GITHUB_ENV

      - name: Create coverage comment (no previous lcov)
        if: steps.find_artifacts.outputs.result == '[]'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.prnum.outputs.num }}
          body: |
            ## Code and Documentation Coverage Report

            ### Documentation Coverage

            **This PR:**

            ${{ env.PR_DOC_COVERAGE_SUMMARY }} 

            **Main:**

            ${{ env.MAIN_DOC_COVERAGE_SUMMARY }} 


            View full documentation coverage for [main](${{ env.MAIN_DOC_URL }}), [this PR](${{ env.PR_DOC_URL }})

            ### Code Coverage Summary

            **This PR**: [Detailed Report](https://${{ github.repository_owner }}.github.io/conjure-oxide/coverage/${{ steps.sha.outputs.result }}/index.html)

            ```
            ${{ steps.lcov.outputs.pr }}
            ```

            **Main**: [Detailed Report](https://${{ github.repository_owner }}.github.io/conjure-oxide/coverage/main/index.html)

            ```
            ${{ steps.lcov.outputs.main }}
            ```

            ### Coverage Main & PR Coverage Change

            ```diff
            ${{ env.diff }}
            ```

      - name: Create coverage comment (previous lcov)
        if: steps.find_artifacts.outputs.result != '[]'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.prnum.outputs.num }}
          body: |
            ## Code and Documentation Coverage Report

            ### Documentation Coverage

            **This PR:**

            ${{ env.PR_DOC_COVERAGE_SUMMARY }} 

            **Main:**

            ${{ env.MAIN_DOC_COVERAGE_SUMMARY }} 


            View full documentation coverage for [main]($MAIN_DOC_URL), [this PR]($PR_DOC_URL)

            ### Code Coverage Summary

            **This PR**: [Detailed Report](https://${{ github.repository_owner }}.github.io/conjure-oxide/coverage/${{ steps.sha.outputs.result }}/index.html)

            ```
            ${{ steps.lcov.outputs.pr }}
            ```

            **Main**: [Detailed Report](https://${{ github.repository_owner }}.github.io/conjure-oxide/coverage/main/index.html)

            ```
            ${{ steps.lcov.outputs.main }}
            ```

            ### Coverage Main & PR Coverage Change

            ```diff
            ${{ env.diff }}
            ```

            ### Previous Main Coverage Change

            ```diff
            ${{ env.hist_diff }}
            ```
