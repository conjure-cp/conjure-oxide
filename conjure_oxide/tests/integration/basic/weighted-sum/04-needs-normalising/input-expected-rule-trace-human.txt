Model before rewriting:

find x: int(2..5)
find y: int(2..5)
find z: int(2..5)

such that

(Sum([Sum([Sum([Sum([Product([5, x]),Product([Product([Product([y, 3]), 1]), 3]);int(1..2)]),-(Product([3, x]));int(1..2)]),Product([-(1), y]);int(1..2)]),Product([y, -(5)]);int(1..2)]) < 11)

--

-(1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
-1 

--

-(5), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
-5 

--

Sum([Sum([Sum([Sum([Product([5, x]),Product([Product([Product([y, 3]), 1]), 3]);int(1..2)]),-(Product([3, x]));int(1..2)]),Product([-1, y]);int(1..2)]),Product([y, -5]);int(1..2)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
Sum([Product([5, x]),Product([Product([Product([y, 3]), 1]), 3]),-(Product([3, x])),Product([-1, y]),Product([y, -5]);int(1..2)]) 

--

Product([Product([Product([y, 3]), 1]), 3]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
Product([y, 3, 1, 3]) 

--

Product([y, 3, 1, 3]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
Product([y, 9]) 

--

Product([y, 9]), 
   ~~> reorder_product ([("Base", 8800)]) 
Product([9, y]) 

--

Product([y, -5]), 
   ~~> reorder_product ([("Base", 8800)]) 
Product([-5, y]) 

--

(Sum([Product([5, x]),Product([9, y]),-(Product([3, x])),Product([-1, y]),Product([-5, y]);int(1..2)]) < 11), 
   ~~> lt_to_leq ([("Minion", 8400)]) 
(Sum([Product([5, x]),Product([9, y]),-(Product([3, x])),Product([-1, y]),Product([-5, y]);int(1..2)]) <= Sum([11,-1;int(1..)])) 

--

Sum([11,-1;int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
10 

--

-(Product([3, x])), 
   ~~> simplify_negation_of_product ([("Base", 8400)]) 
Product([3, x, -1]) 

--

Product([3, x, -1]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
Product([x, -3]) 

--

Product([x, -3]), 
   ~~> reorder_product ([("Base", 8800)]) 
Product([-3, x]) 

--

Sum([Product([5, x]),Product([9, y]),Product([-3, x]),Product([-1, y]),Product([-5, y]);int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
Sum([Product([5, x]),Product([9, y]),Product([-3, x]),Product([-1, y]),Product([-5, y]);int(1..)]) 

--

(Sum([Product([5, x]),Product([9, y]),Product([-3, x]),Product([-1, y]),Product([-5, y]);int(1..)]) <= 10), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
FlatWeightedSumLeq([5, 9, -3, -1, -5],[x, y, x, y, y],10) 

--

Final model:

find x: int(2..5)
find y: int(2..5)
find z: int(2..5)

such that

FlatWeightedSumLeq([5, 9, -3, -1, -5],[x, y, x, y, y],10)

