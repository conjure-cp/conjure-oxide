-(1), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
-1 

--

-(5), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
-5 

--

Sum([Sum([Sum([Sum([Product([5, x]), Product([Product([Product([y, 3]), 1]), 3])]), -(Product([3, x]))]), Product([-1, y])]), Product([y, -5])]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
Sum([Product([5, x]), Product([Product([Product([y, 3]), 1]), 3]), -(Product([3, x])), Product([-1, y]), Product([y, -5])]) 

--

Product([Product([Product([y, 3]), 1]), 3]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
Product([y, 3, 1, 3]) 

--

Product([y, 3, 1, 3]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
Product([y, 9]) 

--

Product([y, 9]), 
   ~~> reorder_product ([("Base", 8800)]) 
Product([9, y]) 

--

Product([y, -5]), 
   ~~> reorder_product ([("Base", 8800)]) 
Product([-5, y]) 

--

(Sum([Product([5, x]), Product([9, y]), -(Product([3, x])), Product([-1, y]), Product([-5, y])]) < 11), 
   ~~> lt_to_leq ([("Minion", 8400)]) 
(Sum([Product([5, x]), Product([9, y]), -(Product([3, x])), Product([-1, y]), Product([-5, y])]) <= Sum([11, -1])) 

--

Sum([11, -1]), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
10 

--

(Sum([Product([5, x]), Product([9, y]), -(Product([3, x])), Product([-1, y]), Product([-5, y])]) <= 10), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4500)]) 
(Sum([-(Product([3, x])), __0]) <= 10) 
new variables:
  __0: int(-2..58)
new constraints:
  FlatWeightedSumLeq([5, 9, -1, -5],[x, y, y, y],__0)
  FlatWeightedSumGeq([5, 9, -1, -5],[x, y, y, y],__0)
--

(Sum([-(Product([3, x])), __0]) <= 10), 
   ~~> flatten_binop ([("Minion", 4200)]) 
(__1 <= 10) 
new variables:
  __1: int(-17..52)
new constraints:
  __1 =aux Sum([-(Product([3, x])), __0])
--

Sum([-(Product([3, x])), __0]), 
   ~~> flatten_vecop ([("Minion", 4200)]) 
Sum([__2, __0]) 
new variables:
  __2: int(-15..-6)
new constraints:
  __2 =aux -(Product([3, x]))
--

__2 =aux -(Product([3, x])), 
   ~~> flatten_minuseq ([("Minion", 4200)]) 
MinusEq(__2,__3) 
new variables:
  __3: int(6..15)
new constraints:
  __3 =aux Product([3, x])
--

__3 =aux Product([3, x]), 
   ~~> introduce_producteq ([("Minion", 4200)]) 
FlatProductEq(x,3,__3) 

--

(__1 <= 10), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__1, 10, 0) 

--

__1 =aux Sum([__2, __0]), 
   ~~> sum_eq_to_inequalities ([("Minion", 4100)]) 
And([(Sum([__2, __0]) <= __1), (Sum([__2, __0]) >= __1)]) 

--

(Sum([__2, __0]) <= __1), 
   ~~> introduce_sumleq ([("Minion", 4400)]) 
SumLeq([__2, __0], __1) 

--

(Sum([__2, __0]) >= __1), 
   ~~> introduce_sumgeq ([("Minion", 4400)]) 
SumGeq([__2, __0], __1) 

--

