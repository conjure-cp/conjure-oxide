Model before rewriting:

letting R be domain record of ([a: bool, b: int(0..9)])
find x: R
find y: R
find z: R

such that

(x[a] = true),
(x[b] = 3),
(y = {a: false,b: 4}),
(y = z)

--

x, 
   ~~> select_representation ([("Base", 8000)]) 
x#record_to_atom 
new variables:
  find x#record_to_atom_1: bool
  find x#record_to_atom_2: int(0..9)
--

x#record_to_atom[a], 
   ~~> record_index_to_bubble ([("Bubble", 8000)]) 
{x#record_to_atom[1] @ and([(1 <= 2),(1 >= 1);int(1..)])} 

--

and([(1 <= 2),(1 >= 1);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
true 

--

({x#record_to_atom[1] @ true} = true), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(x#record_to_atom[1] = true) @ and([true;int(1..)])} 

--

and([true;int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
true 

--

{(x#record_to_atom[1] = true) @ true}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(x#record_to_atom[1] = true),true;int(1..)]) 

--

and([(x#record_to_atom[1] = true),true;int(1..)]),
(x[b] = 3),
(y = {a: false,b: 4}),
(y = z), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(x#record_to_atom[1] = true),
true,
(x[b] = 3),
(y = {a: false,b: 4}),
(y = z) 

--

(x#record_to_atom[1] = true),
true,
(x[b] = 3),
(y = {a: false,b: 4}),
(y = z), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(x#record_to_atom[1] = true),
(x[b] = 3),
(y = {a: false,b: 4}),
(y = z) 

--

x, 
   ~~> select_representation ([("Base", 8000)]) 
x#record_to_atom 

--

x#record_to_atom[b], 
   ~~> record_index_to_bubble ([("Bubble", 8000)]) 
{x#record_to_atom[2] @ and([(2 <= 2),(2 >= 1);int(1..)])} 

--

and([(2 <= 2),(2 >= 1);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
true 

--

({x#record_to_atom[2] @ true} = 3), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(x#record_to_atom[2] = 3) @ and([true;int(1..)])} 

--

and([true;int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
true 

--

{(x#record_to_atom[2] = 3) @ true}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(x#record_to_atom[2] = 3),true;int(1..)]) 

--

(x#record_to_atom[1] = true),
and([(x#record_to_atom[2] = 3),true;int(1..)]),
(y = {a: false,b: 4}),
(y = z), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(x#record_to_atom[1] = true),
(x#record_to_atom[2] = 3),
true,
(y = {a: false,b: 4}),
(y = z) 

--

(x#record_to_atom[1] = true),
(x#record_to_atom[2] = 3),
true,
(y = {a: false,b: 4}),
(y = z), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(x#record_to_atom[1] = true),
(x#record_to_atom[2] = 3),
(y = {a: false,b: 4}),
(y = z) 

--

y, 
   ~~> select_representation ([("Base", 8000)]) 
y#record_to_atom 
new variables:
  find y#record_to_atom_1: bool
  find y#record_to_atom_2: int(0..9)
--

y, 
   ~~> select_representation ([("Base", 8000)]) 
y#record_to_atom 

--

z, 
   ~~> select_representation ([("Base", 8000)]) 
z#record_to_atom 
new variables:
  find z#record_to_atom_1: bool
  find z#record_to_atom_2: int(0..9)
--

(x#record_to_atom[1] = true),
(x#record_to_atom[2] = 3),
(y#record_to_atom = {a: false,b: 4}),
(y#record_to_atom = z#record_to_atom), 
   ~~> substitute_domain_lettings ([("Base", 5000)]) 
(x#record_to_atom[1] = true),
(x#record_to_atom[2] = 3),
(y#record_to_atom = {a: false,b: 4}),
(y#record_to_atom = z#record_to_atom) 

--

x#record_to_atom[1], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
x#record_to_atom_1 

--

(x#record_to_atom_1 = true), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(true, x#record_to_atom_1) 

--

x#record_to_atom[2], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
x#record_to_atom_2 

--

(y#record_to_atom = {a: false,b: 4}), 
   ~~> record_to_const ([("Base", 2000)]) 
and([(y#record_to_atom[1] = {a: false,b: 4}[1]),(y#record_to_atom[2] = {a: false,b: 4}[2]);int(1..)]) 

--

{a: false,b: 4}[1], 
   ~~> constant_evaluator ([("Constant", 9001)]) 
false 

--

{a: false,b: 4}[2], 
   ~~> constant_evaluator ([("Constant", 9001)]) 
4 

--

Reify(true, x#record_to_atom_1),
(x#record_to_atom_2 = 3),
and([(y#record_to_atom[1] = false),(y#record_to_atom[2] = 4);int(1..)]),
(y#record_to_atom = z#record_to_atom), 
   ~~> partial_evaluator ([("Base", 9000)]) 
Reify(true, x#record_to_atom_1),
(x#record_to_atom_2 = 3),
(y#record_to_atom[1] = false),
(y#record_to_atom[2] = 4),
(y#record_to_atom = z#record_to_atom) 

--

y#record_to_atom[1], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
y#record_to_atom_1 

--

(y#record_to_atom_1 = false), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(false, y#record_to_atom_1) 

--

y#record_to_atom[2], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
y#record_to_atom_2 

--

(y#record_to_atom = z#record_to_atom), 
   ~~> record_equality ([("Base", 2000)]) 
and([(y#record_to_atom[1] = z#record_to_atom[1]),(y#record_to_atom[2] = z#record_to_atom[2]);int(1..)]) 

--

Reify(true, x#record_to_atom_1),
(x#record_to_atom_2 = 3),
Reify(false, y#record_to_atom_1),
(y#record_to_atom_2 = 4),
and([(y#record_to_atom[1] = z#record_to_atom[1]),(y#record_to_atom[2] = z#record_to_atom[2]);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
Reify(true, x#record_to_atom_1),
(x#record_to_atom_2 = 3),
Reify(false, y#record_to_atom_1),
(y#record_to_atom_2 = 4),
(y#record_to_atom[1] = z#record_to_atom[1]),
(y#record_to_atom[2] = z#record_to_atom[2]) 

--

y#record_to_atom[1], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
y#record_to_atom_1 

--

z#record_to_atom[1], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
z#record_to_atom_1 

--

y#record_to_atom[2], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
y#record_to_atom_2 

--

z#record_to_atom[2], 
   ~~> index_record_to_atom ([("Base", 2000)]) 
z#record_to_atom_2 

--

Final model:

letting R be domain record of ([a: bool, b: int(0..9)])
find x: record of ([a: bool, b: int(0..9)])
find y: record of ([a: bool, b: int(0..9)])
find z: record of ([a: bool, b: int(0..9)])
find x#record_to_atom_1: bool
find x#record_to_atom_2: int(0..9)
find y#record_to_atom_1: bool
find y#record_to_atom_2: int(0..9)
find z#record_to_atom_1: bool
find z#record_to_atom_2: int(0..9)

such that

Reify(true, x#record_to_atom_1),
(x#record_to_atom_2 = 3),
Reify(false, y#record_to_atom_1),
(y#record_to_atom_2 = 4),
(y#record_to_atom_1 = z#record_to_atom_1),
(y#record_to_atom_2 = z#record_to_atom_2)

