Model before rewriting:

find a: int(0..3)
find b: int(0..3)
find c: int(0..3)

such that

Not((a = b % c))

--

b % c, 
   ~~> mod_to_bubble ([("Bubble", 6000)]) 
{SafeMod(b,c) @ (c != 0)} 

--

(a = {SafeMod(b,c) @ (c != 0)}), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(a = SafeMod(b,c)) @ And([(c != 0)])} 

--

{(a = SafeMod(b,c)) @ And([(c != 0)])}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
And([(a = SafeMod(b,c)), And([(c != 0)])]) 

--

And([(c != 0)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
(c != 0) 

--

Not(And([(a = SafeMod(b,c)), (c != 0)])), 
   ~~> distribute_not_over_and ([("Base", 8400)]) 
Or([Not((a = SafeMod(b,c))), Not((c != 0))]) 

--

Not((a = SafeMod(b,c))), 
   ~~> negated_eq_to_neq ([("Base", 8800)]) 
(a != SafeMod(b,c)) 

--

Not((c != 0)), 
   ~~> negated_neq_to_eq ([("Base", 8800)]) 
(c = 0) 

--

(a != SafeMod(b,c)), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(a != __0) 
new variables:
  find __0: int(0..2)
new constraints:
  __0 =aux SafeMod(b,c)
--

__0 =aux SafeMod(b,c), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(b, c, __0) 

--

Final model:

find a: int(0..3)
find b: int(0..3)
find c: int(0..3)
find __0: int(0..2)

such that

Or([(a != __0), (c = 0)]),
ModEq(b, c, __0)

