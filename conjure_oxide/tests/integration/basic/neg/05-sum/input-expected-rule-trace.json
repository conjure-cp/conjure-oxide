{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: (x = Sum([-(y), z])), resulting in: SumEq([-(y), z], x)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([-(y), z], x), resulting in: And([SumGeq([-(y), z], x), SumLeq([-(y), z], x)])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([-(y), z], x), resulting in: SumGeq([__0, z], x)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([-(y), z], x), resulting in: SumLeq([__1, z], x)","target":"rule_engine"}
{"message":"Rule applicable: introduce_minuseq_from_aux_decl ([(\"Minion\", 4400)]), to expression: __0 =aux -(y), resulting in: MinusEq(__0,y)","target":"rule_engine"}
{"message":"Rule applicable: introduce_minuseq_from_aux_decl ([(\"Minion\", 4400)]), to expression: __1 =aux -(y), resulting in: MinusEq(__1,y)","target":"rule_engine"}
{"count":6,"message":" Number of rules applied"}
