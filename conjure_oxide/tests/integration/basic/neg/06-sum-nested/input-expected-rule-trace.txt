
Model before rewriting:

find a: int(-1..1)
find b: int(-1..1)
find x: int(1..3)
find y: int(-1..1)
find z: int(-1..1)

such that

(x = Sum([Sum([-(y),-((Sum([z,1;int(1..2)]) - a));int(1..2)]),b;int(1..2)]))

--

Successful Tranformation: 
Sum([Sum([-(y),-((Sum([z,1;int(1..2)]) - a));int(1..2)]),b;int(1..2)]), 
~~> normalise_associative_commutative [8900; Base]
Sum([-(y),-((Sum([z,1;int(1..2)]) - a)),b;int(1..2)])


--

Successful Tranformation: 
(Sum([z,1;int(1..2)]) - a), 
~~> minus_to_sum [8400; Base]
Sum([Sum([z,1;int(1..2)]),-(a);int(1..)])


--

Successful Tranformation: 
Sum([Sum([z,1;int(1..2)]),-(a);int(1..)]), 
~~> normalise_associative_commutative [8900; Base]
Sum([z,1,-(a);int(1..)])


--

Successful Tranformation: 
-(Sum([z,1,-(a);int(1..)])), 
~~> distribute_negation_over_sum [8400; Base]
Sum([-(z),-(1),-(-(a));int(1..)])


--

Successful Tranformation: 
-(1), 
~~> constant_evaluator [9001; Constant]
-1


--

Successful Tranformation: 
Sum([-(y),Sum([-(z),-1,-(-(a));int(1..)]),b;int(1..2)]), 
~~> normalise_associative_commutative [8900; Base]
Sum([-(y),-(z),-1,-(-(a)),b;int(1..2)])


--

Successful Tranformation: 
-(-(a)), 
~~> elmininate_double_negation [8400; Base]
a


--

Successful Tranformation: 
Sum([-(y),-(z),-1,a,b;int(1..2)]), 
~~> matrix_to_list [2000; Base]
Sum([-(y),-(z),-1,a,b;int(1..)])


--

Successful Tranformation: 
(x = Sum([-(y),-(z),-1,a,b;int(1..)])), 
~~> introduce_weighted_sumleq_sumgeq [4600; Minion]
and([FlatWeightedSumLeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x),FlatWeightedSumGeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x);int(1..)])


--

Successful Tranformation: 
and([FlatWeightedSumLeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x),FlatWeightedSumGeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x);int(1..)]), 
~~> partial_evaluator [9000; Base]
FlatWeightedSumLeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x),
FlatWeightedSumGeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x)


--


Final model:

find a: int(-1..1)
find b: int(-1..1)
find x: int(1..3)
find y: int(-1..1)
find z: int(-1..1)

such that

FlatWeightedSumLeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x),
FlatWeightedSumGeq([-1, -1, 1, 1, 1],[y, z, -1, a, b],x)

