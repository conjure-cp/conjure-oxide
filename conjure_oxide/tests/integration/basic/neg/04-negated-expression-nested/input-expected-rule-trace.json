{"message":"Rule applicable: div_to_bubble ([(\"Bubble\", 6000)]), to expression: UnsafeDiv(-(UnsafeDiv(y, z)), z), resulting in: {SafeDiv(-(UnsafeDiv(y, z)), z) @ (z != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: (x = {SafeDiv(-(UnsafeDiv(y, z)), z) @ (z != 0)}), resulting in: {(x = SafeDiv(-(UnsafeDiv(y, z)), z)) @ And([(z != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {(x = SafeDiv(-(UnsafeDiv(y, z)), z)) @ And([(z != 0)])}, resulting in: And([(x = SafeDiv(-(UnsafeDiv(y, z)), z)), And([(z != 0)])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_binop ([(\"Minion\", 4400)]), to expression: SafeDiv(-(UnsafeDiv(y, z)), z), resulting in: SafeDiv(__0, z)","target":"rule_engine"}
{"message":"Rule applicable: introduce_diveq ([(\"Minion\", 4200)]), to expression: (x = SafeDiv(__0, z)), resulting in: DivEq(__0, z, x)","target":"rule_engine"}
{"message":"Rule applicable: remove_unit_vector_and ([(\"Base\", 8800)]), to expression: And([(z != 0)]), resulting in: (z != 0)","target":"rule_engine"}
{"message":"Rule applicable: flatten_minuseq ([(\"Minion\", 4400)]), to expression: __0 =aux -(UnsafeDiv(y, z)), resulting in: MinusEq(__0,__1)","target":"rule_engine"}
{"message":"Rule applicable: div_to_bubble ([(\"Bubble\", 6000)]), to expression: UnsafeDiv(y, z), resulting in: {SafeDiv(y, z) @ (z != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: __1 =aux {SafeDiv(y, z) @ (z != 0)}, resulting in: {__1 =aux SafeDiv(y, z) @ And([(z != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {__1 =aux SafeDiv(y, z) @ And([(z != 0)])}, resulting in: And([__1 =aux SafeDiv(y, z), And([(z != 0)])])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([DivEq(__0, z, x), (z != 0), MinusEq(__0,__1), And([__1 =aux SafeDiv(y, z), And([(z != 0)])])]), resulting in: And([DivEq(__0, z, x), (z != 0), MinusEq(__0,__1), __1 =aux SafeDiv(y, z), (z != 0)])","target":"rule_engine"}
{"message":"Rule applicable: introduce_diveq ([(\"Minion\", 4200)]), to expression: __1 =aux SafeDiv(y, z), resulting in: DivEq(y, z, __1)","target":"rule_engine"}
{"count":12,"message":" Number of rules applied"}
