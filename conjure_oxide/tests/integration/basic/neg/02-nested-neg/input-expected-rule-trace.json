{"message":"Rule applicable: div_to_bubble ([(\"Bubble\", 6000)]), to expression: UnsafeDiv(-(y), z), resulting in: {SafeDiv(-(y), z) @ (z != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: (x = {SafeDiv(-(y), z) @ (z != 0)}), resulting in: {(x = SafeDiv(-(y), z)) @ And([(z != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {(x = SafeDiv(-(y), z)) @ And([(z != 0)])}, resulting in: And([(x = SafeDiv(-(y), z)), And([(z != 0)])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_binop ([(\"Minion\", 4400)]), to expression: SafeDiv(-(y), z), resulting in: SafeDiv(__0, z)","target":"rule_engine"}
{"message":"Rule applicable: introduce_diveq ([(\"Minion\", 4200)]), to expression: (x = SafeDiv(__0, z)), resulting in: DivEq(__0, z, x)","target":"rule_engine"}
{"message":"Rule applicable: remove_unit_vector_and ([(\"Base\", 8800)]), to expression: And([(z != 0)]), resulting in: (z != 0)","target":"rule_engine"}
{"message":"Rule applicable: introduce_minuseq_from_aux_decl ([(\"Minion\", 4400)]), to expression: __0 =aux -(y), resulting in: MinusEq(__0,y)","target":"rule_engine"}
{"count":7,"message":" Number of rules applied"}
