{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: (Sum([a, Sum([b, Sum([c, d])]), e]) = 5), resulting in: SumEq([a, Sum([b, Sum([c, d])]), e], 5)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([a, Sum([b, Sum([c, d])]), e], 5), resulting in: And([SumGeq([a, Sum([b, Sum([c, d])]), e], 5), SumLeq([a, Sum([b, Sum([c, d])]), e], 5)])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([a, Sum([b, Sum([c, d])]), e], 5), resulting in: SumGeq([a, __0, e], 5)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([a, Sum([b, Sum([c, d])]), e], 5), resulting in: SumLeq([a, __1, e], 5)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __0 =aux Sum([b, Sum([c, d])]), resulting in: SumEq([b, Sum([c, d])], __0)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([b, Sum([c, d])], __0), resulting in: And([SumGeq([b, Sum([c, d])], __0), SumLeq([b, Sum([c, d])], __0)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), And([SumGeq([b, Sum([c, d])], __0), SumLeq([b, Sum([c, d])], __0)]), __1 =aux Sum([b, Sum([c, d])])]), resulting in: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, Sum([c, d])], __0), SumLeq([b, Sum([c, d])], __0), __1 =aux Sum([b, Sum([c, d])])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([b, Sum([c, d])], __0), resulting in: SumGeq([b, __2], __0)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([b, Sum([c, d])], __0), resulting in: SumLeq([b, __3], __0)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __1 =aux Sum([b, Sum([c, d])]), resulting in: SumEq([b, Sum([c, d])], __1)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([b, Sum([c, d])], __1), resulting in: And([SumGeq([b, Sum([c, d])], __1), SumLeq([b, Sum([c, d])], __1)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), And([SumGeq([b, Sum([c, d])], __1), SumLeq([b, Sum([c, d])], __1)]), __2 =aux Sum([c, d]), __3 =aux Sum([c, d])]), resulting in: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, Sum([c, d])], __1), SumLeq([b, Sum([c, d])], __1), __2 =aux Sum([c, d]), __3 =aux Sum([c, d])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([b, Sum([c, d])], __1), resulting in: SumGeq([b, __4], __1)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([b, Sum([c, d])], __1), resulting in: SumLeq([b, __5], __1)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __2 =aux Sum([c, d]), resulting in: SumEq([c, d], __2)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([c, d], __2), resulting in: And([SumGeq([c, d], __2), SumLeq([c, d], __2)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), And([SumGeq([c, d], __2), SumLeq([c, d], __2)]), __3 =aux Sum([c, d]), __4 =aux Sum([c, d]), __5 =aux Sum([c, d])]), resulting in: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), SumGeq([c, d], __2), SumLeq([c, d], __2), __3 =aux Sum([c, d]), __4 =aux Sum([c, d]), __5 =aux Sum([c, d])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __3 =aux Sum([c, d]), resulting in: SumEq([c, d], __3)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([c, d], __3), resulting in: And([SumGeq([c, d], __3), SumLeq([c, d], __3)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), SumGeq([c, d], __2), SumLeq([c, d], __2), And([SumGeq([c, d], __3), SumLeq([c, d], __3)]), __4 =aux Sum([c, d]), __5 =aux Sum([c, d])]), resulting in: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), SumGeq([c, d], __2), SumLeq([c, d], __2), SumGeq([c, d], __3), SumLeq([c, d], __3), __4 =aux Sum([c, d]), __5 =aux Sum([c, d])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __4 =aux Sum([c, d]), resulting in: SumEq([c, d], __4)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([c, d], __4), resulting in: And([SumGeq([c, d], __4), SumLeq([c, d], __4)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), SumGeq([c, d], __2), SumLeq([c, d], __2), SumGeq([c, d], __3), SumLeq([c, d], __3), And([SumGeq([c, d], __4), SumLeq([c, d], __4)]), __5 =aux Sum([c, d])]), resulting in: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), SumGeq([c, d], __2), SumLeq([c, d], __2), SumGeq([c, d], __3), SumLeq([c, d], __3), SumGeq([c, d], __4), SumLeq([c, d], __4), __5 =aux Sum([c, d])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __5 =aux Sum([c, d]), resulting in: SumEq([c, d], __5)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([c, d], __5), resulting in: And([SumGeq([c, d], __5), SumLeq([c, d], __5)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), SumGeq([c, d], __2), SumLeq([c, d], __2), SumGeq([c, d], __3), SumLeq([c, d], __3), SumGeq([c, d], __4), SumLeq([c, d], __4), And([SumGeq([c, d], __5), SumLeq([c, d], __5)])]), resulting in: And([SumGeq([a, __0, e], 5), SumLeq([a, __1, e], 5), SumGeq([b, __2], __0), SumLeq([b, __3], __0), SumGeq([b, __4], __1), SumLeq([b, __5], __1), SumGeq([c, d], __2), SumLeq([c, d], __2), SumGeq([c, d], __3), SumLeq([c, d], __3), SumGeq([c, d], __4), SumLeq([c, d], __4), SumGeq([c, d], __5), SumLeq([c, d], __5)])","target":"rule_engine"}
{"count":26,"message":" Number of rules applied"}
