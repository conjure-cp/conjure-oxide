Model before rewriting:

find x: int(2..20)
find y: int(0..5)

such that

(UnsafePow(Sum([x,2;int(1..2)]), UnsafeDiv(y, 2)) = 4)

--

UnsafeDiv(y, 2), 
   ~~> div_to_bubble ([("Bubble", 6000)]) 
{SafeDiv(y, 2) @ (2 != 0)} 

--

(2 != 0), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

UnsafePow(Sum([x,2;int(1..2)]), {SafeDiv(y, 2) @ true}), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) @ and([true;int(1..)])} 

--

and([true;int(1..)]), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

({UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) @ true} = 4), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4) @ and([true;int(1..)])} 

--

and([true;int(1..)]), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

{(UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4) @ true}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),true;int(1..)]) 

--

and([(UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),true;int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),
true 

--

(UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),
true, 
   ~~> partial_evaluator ([("Base", 9000)]) 
(UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4) 

--

UnsafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)), 
   ~~> pow_to_bubble ([("Bubble", 6000)]) 
{SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) @ and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)])} 

--

({SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) @ and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)])} = 4), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4) @ and([and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]);int(1..)])} 

--

{(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4) @ and([and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]);int(1..)])}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),and([and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]);int(1..)]);int(1..)]) 

--

and([(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),and([and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]);int(1..)]);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),
and([and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]);int(1..)]) 

--

(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),
and([and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),
and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]) 

--

(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),
and([or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),(SafeDiv(y, 2) >= 0);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)) = 4),
or([(Sum([x,2;int(1..2)]) != 0),(SafeDiv(y, 2) != 0);int(1..)]),
(SafeDiv(y, 2) >= 0) 

--

SafePow(Sum([x,2;int(1..2)]), SafeDiv(y, 2)), 
   ~~> flatten_generic ([("Minion", 4200)]) 
SafePow(Sum([x,2;int(1..2)]), __0) 
new variables:
  find __0: int(0..2)
new constraints:
  __0 =aux SafeDiv(y, 2)
--

(SafeDiv(y, 2) != 0), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__1 != 0) 
new variables:
  find __1: int(0..2)
new constraints:
  __1 =aux SafeDiv(y, 2)
--

(SafeDiv(y, 2) >= 0), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__2 >= 0) 
new variables:
  find __2: int(0..2)
new constraints:
  __2 =aux SafeDiv(y, 2)
--

__0 =aux SafeDiv(y, 2), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(y, 2, __0) 

--

__1 =aux SafeDiv(y, 2), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(y, 2, __1) 

--

__2 =aux SafeDiv(y, 2), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(y, 2, __2) 

--

(__2 >= 0), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(0, __2, 0) 

--

Sum([x,2;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
Sum([x,2;int(1..)]) 

--

SafePow(Sum([x,2;int(1..)]), __0), 
   ~~> flatten_generic ([("Minion", 4200)]) 
SafePow(__3, __0) 
new variables:
  find __3: int(4..22)
new constraints:
  __3 =aux Sum([x,2;int(1..)])
--

__3 =aux Sum([x,2;int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([x, 2], __3),SumGeq([x, 2], __3);int(1..)]) 

--

(SafePow(__3, __0) = 4),
or([(Sum([x,2;int(1..2)]) != 0),(__1 != 0);int(1..)]),
Ineq(0, __2, 0),
DivEq(y, 2, __0),
DivEq(y, 2, __1),
DivEq(y, 2, __2),
and([SumLeq([x, 2], __3),SumGeq([x, 2], __3);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(SafePow(__3, __0) = 4),
or([(Sum([x,2;int(1..2)]) != 0),(__1 != 0);int(1..)]),
Ineq(0, __2, 0),
DivEq(y, 2, __0),
DivEq(y, 2, __1),
DivEq(y, 2, __2),
SumLeq([x, 2], __3),
SumGeq([x, 2], __3) 

--

(SafePow(__3, __0) = 4), 
   ~~> introduce_poweq ([("Minion", 4200)]) 
MinionPow(__3,__0,4) 

--

Sum([x,2;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
Sum([x,2;int(1..)]) 

--

(Sum([x,2;int(1..)]) != 0), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__4 != 0) 
new variables:
  find __4: int(4..22)
new constraints:
  __4 =aux Sum([x,2;int(1..)])
--

__4 =aux Sum([x,2;int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([x, 2], __4),SumGeq([x, 2], __4);int(1..)]) 

--

MinionPow(__3,__0,4),
or([(__4 != 0),(__1 != 0);int(1..)]),
Ineq(0, __2, 0),
DivEq(y, 2, __0),
DivEq(y, 2, __1),
DivEq(y, 2, __2),
SumLeq([x, 2], __3),
SumGeq([x, 2], __3),
and([SumLeq([x, 2], __4),SumGeq([x, 2], __4);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
MinionPow(__3,__0,4),
or([(__4 != 0),(__1 != 0);int(1..)]),
Ineq(0, __2, 0),
DivEq(y, 2, __0),
DivEq(y, 2, __1),
DivEq(y, 2, __2),
SumLeq([x, 2], __3),
SumGeq([x, 2], __3),
SumLeq([x, 2], __4),
SumGeq([x, 2], __4) 

--

Final model:

find x: int(2..20)
find y: int(0..5)
find __0: int(0..2)
find __1: int(0..2)
find __2: int(0..2)
find __3: int(4..22)
find __4: int(4..22)

such that

MinionPow(__3,__0,4),
or([(__4 != 0),(__1 != 0);int(1..)]),
Ineq(0, __2, 0),
DivEq(y, 2, __0),
DivEq(y, 2, __1),
DivEq(y, 2, __2),
SumLeq([x, 2], __3),
SumGeq([x, 2], __3),
SumLeq([x, 2], __4),
SumGeq([x, 2], __4)

