Model before rewriting:

find m: matrix indexed by [[int(1..5)]] of int(1..5)

such that

and([(m[i] = i) | i: int(1..5),])

--

, 
   ~~> eval_root ([("Constant", 9001)]) 
true 

--

m, 
   ~~> select_representation ([("Base", 8000)]) 
m#matrix_to_atom 
new variables:
  find m#matrix_to_atom_1: int(1..5)
  find m#matrix_to_atom_2: int(1..5)
  find m#matrix_to_atom_3: int(1..5)
  find m#matrix_to_atom_4: int(1..5)
  find m#matrix_to_atom_5: int(1..5)
--

m#matrix_to_atom[i], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{m#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} 

--

({m#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} = i), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(m#matrix_to_atom[i] = i) @ and([and([__inDomain(i,int(1..5));int(1..)]);int(1..)])} 

--

{(m#matrix_to_atom[i] = i) @ and([and([__inDomain(i,int(1..5));int(1..)]);int(1..)])}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(m#matrix_to_atom[i] = i),and([and([__inDomain(i,int(1..5));int(1..)]);int(1..)]);int(1..)]) 

--

and([and([__inDomain(i,int(1..5));int(1..)]);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
and([__inDomain(i,int(1..5));int(1..)]) 

--

and([__inDomain(i,int(1..5));int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
__inDomain(i,int(1..5)) 

--

[and([(m#matrix_to_atom[i] = i),__inDomain(i,int(1..5));int(1..)]) | i: int(1..5),true], 
   ~~> expand_comprehension ([("Base", 1000)]) 
[and([(m#matrix_to_atom[1] = 1),__inDomain(1,int(1..5));int(1..)]),and([(m#matrix_to_atom[2] = 2),__inDomain(2,int(1..5));int(1..)]),and([(m#matrix_to_atom[3] = 3),__inDomain(3,int(1..5));int(1..)]),and([(m#matrix_to_atom[4] = 4),__inDomain(4,int(1..5));int(1..)]),and([(m#matrix_to_atom[5] = 5),__inDomain(5,int(1..5));int(1..)]);int(1..)] 

--

__inDomain(1,int(1..5)), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

__inDomain(2,int(1..5)), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

__inDomain(3,int(1..5)), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

__inDomain(4,int(1..5)), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

__inDomain(5,int(1..5)), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
true 

--

and([(m#matrix_to_atom[1] = 1),true;int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
and([(m#matrix_to_atom[1] = 1);int(1..)]) 

--

and([(m#matrix_to_atom[2] = 2),true;int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
and([(m#matrix_to_atom[2] = 2);int(1..)]) 

--

and([(m#matrix_to_atom[3] = 3),true;int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
and([(m#matrix_to_atom[3] = 3);int(1..)]) 

--

and([(m#matrix_to_atom[4] = 4),true;int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
and([(m#matrix_to_atom[4] = 4);int(1..)]) 

--

and([(m#matrix_to_atom[5] = 5),true;int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
and([(m#matrix_to_atom[5] = 5);int(1..)]) 

--

and([(m#matrix_to_atom[1] = 1);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
(m#matrix_to_atom[1] = 1) 

--

and([(m#matrix_to_atom[2] = 2);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
(m#matrix_to_atom[2] = 2) 

--

and([(m#matrix_to_atom[3] = 3);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
(m#matrix_to_atom[3] = 3) 

--

and([(m#matrix_to_atom[4] = 4);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
(m#matrix_to_atom[4] = 4) 

--

and([(m#matrix_to_atom[5] = 5);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
(m#matrix_to_atom[5] = 5) 

--

m#matrix_to_atom[1], 
   ~~> index_matrix_to_atom ([("Base", 2000)]) 
m#matrix_to_atom_1 

--

m#matrix_to_atom[2], 
   ~~> index_matrix_to_atom ([("Base", 2000)]) 
m#matrix_to_atom_2 

--

m#matrix_to_atom[3], 
   ~~> index_matrix_to_atom ([("Base", 2000)]) 
m#matrix_to_atom_3 

--

m#matrix_to_atom[4], 
   ~~> index_matrix_to_atom ([("Base", 2000)]) 
m#matrix_to_atom_4 

--

m#matrix_to_atom[5], 
   ~~> index_matrix_to_atom ([("Base", 2000)]) 
m#matrix_to_atom_5 

--

Final model:

find m: matrix indexed by [[int(1..5)]] of int(1..5)
find m#matrix_to_atom_1: int(1..5)
find m#matrix_to_atom_2: int(1..5)
find m#matrix_to_atom_3: int(1..5)
find m#matrix_to_atom_4: int(1..5)
find m#matrix_to_atom_5: int(1..5)

such that

and([(m#matrix_to_atom_1 = 1),(m#matrix_to_atom_2 = 2),(m#matrix_to_atom_3 = 3),(m#matrix_to_atom_4 = 4),(m#matrix_to_atom_5 = 5);int(1..)])

