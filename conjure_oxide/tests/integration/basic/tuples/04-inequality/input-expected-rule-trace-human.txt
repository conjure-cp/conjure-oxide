Model before rewriting:

find x: tuple of ([int(1..2), int(1..5)])
find y: tuple of ([int(2..5), int(1..5)])

such that

(x != y)

--

x, 
   ~~> select_representation ([("Base", 8000)]) 
x#tuple_to_atom 
new variables:
  find x#tuple_to_atom_1: int(1..2)
  find x#tuple_to_atom_2: int(1..5)
--

y, 
   ~~> select_representation ([("Base", 8000)]) 
y#tuple_to_atom 
new variables:
  find y#tuple_to_atom_1: int(2..5)
  find y#tuple_to_atom_2: int(1..5)
--

(x#tuple_to_atom != y#tuple_to_atom), 
   ~~> tuple_inequality ([("Base", 2000)]) 
Not(and([(x#tuple_to_atom[1] = y#tuple_to_atom[1]),(x#tuple_to_atom[2] = y#tuple_to_atom[2]);int(1..)])) 

--

Not(and([(x#tuple_to_atom[1] = y#tuple_to_atom[1]),(x#tuple_to_atom[2] = y#tuple_to_atom[2]);int(1..)])), 
   ~~> distribute_not_over_and ([("Base", 8400)]) 
or([Not((x#tuple_to_atom[1] = y#tuple_to_atom[1])),Not((x#tuple_to_atom[2] = y#tuple_to_atom[2]));int(1..)]) 

--

Not((x#tuple_to_atom[1] = y#tuple_to_atom[1])), 
   ~~> negated_eq_to_neq ([("Base", 8800)]) 
(x#tuple_to_atom[1] != y#tuple_to_atom[1]) 

--

Not((x#tuple_to_atom[2] = y#tuple_to_atom[2])), 
   ~~> negated_eq_to_neq ([("Base", 8800)]) 
(x#tuple_to_atom[2] != y#tuple_to_atom[2]) 

--

x#tuple_to_atom[1], 
   ~~> index_tuple_to_atom ([("Base", 2000)]) 
x#tuple_to_atom_1 

--

y#tuple_to_atom[1], 
   ~~> index_tuple_to_atom ([("Base", 2000)]) 
y#tuple_to_atom_1 

--

x#tuple_to_atom[2], 
   ~~> index_tuple_to_atom ([("Base", 2000)]) 
x#tuple_to_atom_2 

--

y#tuple_to_atom[2], 
   ~~> index_tuple_to_atom ([("Base", 2000)]) 
y#tuple_to_atom_2 

--

Final model:

find x: tuple of ([int(1..2), int(1..5)])
find y: tuple of ([int(2..5), int(1..5)])
find x#tuple_to_atom_1: int(1..2)
find x#tuple_to_atom_2: int(1..5)
find y#tuple_to_atom_1: int(2..5)
find y#tuple_to_atom_2: int(1..5)

such that

or([(x#tuple_to_atom_1 != y#tuple_to_atom_1),(x#tuple_to_atom_2 != y#tuple_to_atom_2);int(1..)])

