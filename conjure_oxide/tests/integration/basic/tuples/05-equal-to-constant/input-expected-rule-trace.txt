
Model before rewriting:

find x: tuple of ([int(1..2), int(1..5)])

such that

(x = (2,3))

--

Successful Tranformation: 
x, 
~~> select_representation [8000; Base]
x#tuple_to_atom
new variables:
  find x#tuple_to_atom_1: int(1..2)
  find x#tuple_to_atom_2: int(1..5)

--

Successful Tranformation: 
(x#tuple_to_atom = (2,3)), 
~~> tuple_to_constant [2000; Base]
and([(x#tuple_to_atom[1] = (2,3)[1]),(x#tuple_to_atom[2] = (2,3)[2]);int(1..)])


--

Successful Tranformation: 
(2,3)[1], 
~~> constant_evaluator [9001; Constant]
2


--

Successful Tranformation: 
(2,3)[2], 
~~> constant_evaluator [9001; Constant]
3


--

Successful Tranformation: 
and([(x#tuple_to_atom[1] = 2),(x#tuple_to_atom[2] = 3);int(1..)]), 
~~> partial_evaluator [9000; Base]
(x#tuple_to_atom[1] = 2),
(x#tuple_to_atom[2] = 3)


--

Successful Tranformation: 
x#tuple_to_atom[1], 
~~> index_tuple_to_atom [2000; Base]
x#tuple_to_atom_1


--

Successful Tranformation: 
x#tuple_to_atom[2], 
~~> index_tuple_to_atom [2000; Base]
x#tuple_to_atom_2


--


Final model:

find x: tuple of ([int(1..2), int(1..5)])
find x#tuple_to_atom_1: int(1..2)
find x#tuple_to_atom_2: int(1..5)

such that

(x#tuple_to_atom_1 = 2),
(x#tuple_to_atom_2 = 3)

