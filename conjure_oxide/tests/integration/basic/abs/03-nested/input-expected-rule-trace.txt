
Model before rewriting:

find x: int(-5..2)
find y: int(-5..2)
find z: int(-5..2)

such that

(Sum([|(Sum([UnsafeDiv(x, 2),y;int(1..2)]) - z)|,UnsafeDiv(|y|, 2);int(1..2)]) = 10)

--

Successful Tranformation: 
(Sum([UnsafeDiv(x, 2),y;int(1..2)]) - z), 
~~> minus_to_sum [8400; Base]
Sum([Sum([UnsafeDiv(x, 2),y;int(1..2)]),-(z);int(1..)])


--

Successful Tranformation: 
Sum([Sum([UnsafeDiv(x, 2),y;int(1..2)]),-(z);int(1..)]), 
~~> normalise_associative_commutative [8900; Base]
Sum([UnsafeDiv(x, 2),y,-(z);int(1..)])


--

Successful Tranformation: 
UnsafeDiv(x, 2), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(x, 2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
[{SafeDiv(x, 2) @ true},y,-(z);int(1..)], 
~~> bubble_up [8900; Bubble]
{[SafeDiv(x, 2),y,-(z);int(1..)] @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
Sum({[SafeDiv(x, 2),y,-(z);int(1..)] @ true}), 
~~> bubble_up [8900; Bubble]
{Sum([SafeDiv(x, 2),y,-(z);int(1..)]) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
|{Sum([SafeDiv(x, 2),y,-(z);int(1..)]) @ true}|, 
~~> bubble_up [8900; Bubble]
{|Sum([SafeDiv(x, 2),y,-(z);int(1..)])| @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
[{|Sum([SafeDiv(x, 2),y,-(z);int(1..)])| @ true},UnsafeDiv(|y|, 2);int(1..2)], 
~~> bubble_up [8900; Bubble]
{[|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)] @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
Sum({[|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)] @ true}), 
~~> bubble_up [8900; Bubble]
{Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) @ true} = 10), 
~~> bubble_up [8900; Bubble]
{(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) = 10) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) = 10) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) = 10),true;int(1..)])


--

Successful Tranformation: 
and([(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) = 10),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) = 10),
true


--

Successful Tranformation: 
(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) = 10),
true, 
~~> partial_evaluator [9000; Base]
(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,UnsafeDiv(|y|, 2);int(1..2)]) = 10)


--

Successful Tranformation: 
UnsafeDiv(|y|, 2), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(|y|, 2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
[|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,{SafeDiv(|y|, 2) @ true};int(1..2)], 
~~> bubble_up [8900; Bubble]
{[|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)] @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
Sum({[|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)] @ true}), 
~~> bubble_up [8900; Bubble]
{Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) @ true} = 10), 
~~> bubble_up [8900; Bubble]
{(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) = 10) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) = 10) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) = 10),true;int(1..)])


--

Successful Tranformation: 
and([(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) = 10),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) = 10),
true


--

Successful Tranformation: 
(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) = 10),
true, 
~~> partial_evaluator [9000; Base]
(Sum([|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|,SafeDiv(|y|, 2);int(1..2)]) = 10)


--

Successful Tranformation: 
|Sum([SafeDiv(x, 2),y,-(z);int(1..)])|, 
~~> flatten_generic [4200; Minion]
|__0|
new variables:
  find __0: int(-10..8)
new constraints:
  __0 =aux Sum([SafeDiv(x, 2),y,-(z);int(1..)])

--

Successful Tranformation: 
__0 =aux Sum([SafeDiv(x, 2),y,-(z);int(1..)]), 
~~> introduce_weighted_sumleq_sumgeq [4600; Minion]
and([FlatWeightedSumLeq([1, 1, -1],[__1, y, z],__0),FlatWeightedSumGeq([1, 1, -1],[__1, y, z],__0);int(1..)])
new variables:
  find __1: int(-3..1)
new constraints:
  __1 =aux SafeDiv(x, 2)

--

Successful Tranformation: 
(Sum([|__0|,SafeDiv(|y|, 2);int(1..2)]) = 10),
and([FlatWeightedSumLeq([1, 1, -1],[__1, y, z],__0),FlatWeightedSumGeq([1, 1, -1],[__1, y, z],__0);int(1..)]),
__1 =aux SafeDiv(x, 2), 
~~> partial_evaluator [9000; Base]
(Sum([|__0|,SafeDiv(|y|, 2);int(1..2)]) = 10),
FlatWeightedSumLeq([1, 1, -1],[__1, y, z],__0),
FlatWeightedSumGeq([1, 1, -1],[__1, y, z],__0),
__1 =aux SafeDiv(x, 2)


--

Successful Tranformation: 
SafeDiv(|y|, 2), 
~~> flatten_generic [4200; Minion]
SafeDiv(__2, 2)
new variables:
  find __2: int(0..5)
new constraints:
  __2 =aux |y|

--

Successful Tranformation: 
__2 =aux |y|, 
~~> introduce_abseq [4400; Minion]
AbsEq(__2,y)


--

Successful Tranformation: 
__1 =aux SafeDiv(x, 2), 
~~> introduce_diveq [4200; Minion]
DivEq(x, 2, __1)


--

Successful Tranformation: 
Sum([|__0|,SafeDiv(__2, 2);int(1..2)]), 
~~> matrix_to_list [2000; Base]
Sum([|__0|,SafeDiv(__2, 2);int(1..)])


--

Successful Tranformation: 
(Sum([|__0|,SafeDiv(__2, 2);int(1..)]) = 10), 
~~> introduce_weighted_sumleq_sumgeq [4600; Minion]
and([SumLeq([__3, __4], 10),SumGeq([__3, __4], 10);int(1..)])
new variables:
  find __3: int(0..10)
  find __4: int(0..2)
new constraints:
  __3 =aux |__0|
  __4 =aux SafeDiv(__2, 2)

--

Successful Tranformation: 
and([SumLeq([__3, __4], 10),SumGeq([__3, __4], 10);int(1..)]),
FlatWeightedSumLeq([1, 1, -1],[__1, y, z],__0),
FlatWeightedSumGeq([1, 1, -1],[__1, y, z],__0),
DivEq(x, 2, __1),
AbsEq(__2,y),
__3 =aux |__0|,
__4 =aux SafeDiv(__2, 2), 
~~> partial_evaluator [9000; Base]
SumLeq([__3, __4], 10),
SumGeq([__3, __4], 10),
FlatWeightedSumLeq([1, 1, -1],[__1, y, z],__0),
FlatWeightedSumGeq([1, 1, -1],[__1, y, z],__0),
DivEq(x, 2, __1),
AbsEq(__2,y),
__3 =aux |__0|,
__4 =aux SafeDiv(__2, 2)


--

Successful Tranformation: 
__3 =aux |__0|, 
~~> introduce_abseq [4400; Minion]
AbsEq(__3,__0)


--

Successful Tranformation: 
__4 =aux SafeDiv(__2, 2), 
~~> introduce_diveq [4200; Minion]
DivEq(__2, 2, __4)


--


Final model:

find x: int(-5..2)
find y: int(-5..2)
find z: int(-5..2)
find __0: int(-10..8)
find __1: int(-3..1)
find __2: int(0..5)
find __3: int(0..10)
find __4: int(0..2)

such that

SumLeq([__3, __4], 10),
SumGeq([__3, __4], 10),
FlatWeightedSumLeq([1, 1, -1],[__1, y, z],__0),
FlatWeightedSumGeq([1, 1, -1],[__1, y, z],__0),
DivEq(x, 2, __1),
AbsEq(__2,y),
AbsEq(__3,__0),
DivEq(__2, 2, __4)

