Model before rewriting:

find x: int(1..5)
find y: int(1..5)
find z: int(1..5)

such that

((x < 3)) -> ((y >= 5)),
((Sum([y,z;int(1..2)]) = 8)) -> ((Sum([x,2;int(1..2)]) = 3))

--

(x < 3), 
   ~~> lt_to_leq ([("Minion", 8400)]) 
(x <= Sum([3,-1;int(1..)])) 

--

Sum([3,-1;int(1..)]), 
   ~~> apply_eval_constant ([("Constant", 9001)]) 
2 

--

((x <= 2)) -> ((y >= 5)), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__0) -> ((y >= 5)) 
new variables:
  find __0: bool
new constraints:
  __0 =aux (x <= 2)
--

(__0) -> ((y >= 5)), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
ReifyImply((y >= 5), __0) 

--

__0 =aux (x <= 2), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify((x <= 2), __0) 

--

((Sum([y,z;int(1..2)]) = 8)) -> ((Sum([x,2;int(1..2)]) = 3)), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__1) -> ((Sum([x,2;int(1..2)]) = 3)) 
new variables:
  find __1: bool
new constraints:
  __1 =aux (Sum([y,z;int(1..2)]) = 8)
--

(__1) -> ((Sum([x,2;int(1..2)]) = 3)), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
ReifyImply((Sum([x,2;int(1..2)]) = 3), __1) 

--

__1 =aux (Sum([y,z;int(1..2)]) = 8), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify((Sum([y,z;int(1..2)]) = 8), __1) 

--

(y >= 5), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(5, y, 0) 

--

(x <= 2), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(x, 2, 0) 

--

Sum([x,2;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
Sum([x,2;int(1..)]) 

--

(Sum([x,2;int(1..)]) = 3), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([x, 2], 3),SumGeq([x, 2], 3);int(1..)]) 

--

Sum([y,z;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
Sum([y,z;int(1..)]) 

--

(Sum([y,z;int(1..)]) = 8), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([y, z], 8),SumGeq([y, z], 8);int(1..)]) 

--

Final model:

find x: int(1..5)
find y: int(1..5)
find z: int(1..5)
find __0: bool
find __1: bool

such that

ReifyImply(Ineq(5, y, 0), __0),
ReifyImply(and([SumLeq([x, 2], 3),SumGeq([x, 2], 3);int(1..)]), __1),
Reify(Ineq(x, 2, 0), __0),
Reify(and([SumLeq([y, z], 8),SumGeq([y, z], 8);int(1..)]), __1)

