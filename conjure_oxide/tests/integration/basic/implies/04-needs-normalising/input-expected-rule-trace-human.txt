Model before rewriting:

find a: bool
find b: bool
find c: bool
find d: bool
find e: bool
find f: bool
find g: bool
find h: bool
find x: bool
find y: bool

such that

Not((Not(x)) -> (Not(y))),
(Not(a)) -> (Not(b)),
(c) -> ((d) -> (e)),
((h) -> (f)) -> ((h) -> (g))

--

Not((Not(x)) -> (Not(y))), 
   ~~> normalise_implies_negation ([("Base", 8800)]) 
and([Not(x),Not(Not(y));int(1..)]) 

--

and([Not(x),Not(Not(y));int(1..)]),
(Not(a)) -> (Not(b)),
(c) -> ((d) -> (e)),
((h) -> (f)) -> ((h) -> (g)), 
   ~~> partial_evaluator ([("Base", 9000)]) 
Not(x),
Not(Not(y)),
(Not(a)) -> (Not(b)),
(c) -> ((d) -> (e)),
((h) -> (f)) -> ((h) -> (g)) 

--

(Not(a)) -> (Not(b)), 
   ~~> normalise_implies_contrapositive ([("Base", 8800)]) 
(b) -> (a) 

--

((h) -> (f)) -> ((h) -> (g)), 
   ~~> normalise_implies_left_distributivity ([("Base", 8800)]) 
(h) -> ((f) -> (g)) 

--

Not(Not(y)), 
   ~~> remove_double_negation ([("Base", 8400)]) 
y 

--

(c) -> ((d) -> (e)), 
   ~~> normalise_implies_uncurry ([("Base", 8400)]) 
(and([c,d;int(1..)])) -> (e) 

--

(h) -> ((f) -> (g)), 
   ~~> normalise_implies_uncurry ([("Base", 8400)]) 
(and([h,f;int(1..)])) -> (g) 

--

(b) -> (a), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
Ineq(b, a, 0) 

--

(and([c,d;int(1..)])) -> (e), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__0) -> (e) 
new variables:
  find __0: bool
new constraints:
  __0 =aux and([c,d;int(1..)])
--

(__0) -> (e), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
Ineq(__0, e, 0) 

--

__0 =aux and([c,d;int(1..)]), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(and([c,d;int(1..)]), __0) 

--

(and([h,f;int(1..)])) -> (g), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__1) -> (g) 
new variables:
  find __1: bool
new constraints:
  __1 =aux and([h,f;int(1..)])
--

(__1) -> (g), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
Ineq(__1, g, 0) 

--

__1 =aux and([h,f;int(1..)]), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(and([h,f;int(1..)]), __1) 

--

Not(x), 
   ~~> not_literal_to_wliteral ([("Minion", 4100)]) 
WatchedLiteral(x,false) 

--

Final model:

find a: bool
find b: bool
find c: bool
find d: bool
find e: bool
find f: bool
find g: bool
find h: bool
find x: bool
find y: bool
find __0: bool
find __1: bool

such that

WatchedLiteral(x,false),
y,
Ineq(b, a, 0),
Ineq(__0, e, 0),
Ineq(__1, g, 0),
Reify(and([c,d;int(1..)]), __0),
Reify(and([h,f;int(1..)]), __1)

