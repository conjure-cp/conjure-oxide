
Model before rewriting:

find x: int(2..4)
find y: int(2..4)
find z: int(2..4)

such that

(Product([Product([x, y]), z]) < 15)

--

Successful Tranformation: 
Product([Product([x, y]), z]), 
~~> normalise_associative_commutative [8900; Base]
Product([x, y, z])


--

Successful Tranformation: 
(Product([x, y, z]) < 15), 
~~> lt_to_leq [8400; Minion]
(Product([x, y, z]) <= Sum([15,-1;int(1..)]))


--

Successful Tranformation: 
Sum([15,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
14


--

Successful Tranformation: 
(Product([x, y, z]) <= 14), 
~~> flatten_generic [4200; Minion]
(__0 <= 14)
new variables:
  find __0: int(8..64)
new constraints:
  __0 =aux Product([x, y, z])

--

Successful Tranformation: 
__0 =aux Product([x, y, z]), 
~~> introduce_producteq [4200; Minion]
FlatProductEq(z,__1,__0)
new variables:
  find __1: int(4..16)
new constraints:
  FlatProductEq(y,x,__1)

--

Successful Tranformation: 
(__0 <= 14), 
~~> leq_to_ineq [4100; Minion]
Ineq(__0, 14, 0)


--


Final model:

find x: int(2..4)
find y: int(2..4)
find z: int(2..4)
find __0: int(8..64)
find __1: int(4..16)

such that

Ineq(__0, 14, 0),
FlatProductEq(z,__1,__0),
FlatProductEq(y,x,__1)

