Model before rewriting:

letting MATRIX be domain matrix indexed by [[int(1..3), int(1..2)]] of int(1..3)
find a: MATRIX

such that

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1)

--

a[..,1], 
   ~~> slice_to_bubble ([("Bubble", 6000)]) 
{a[..,1] @ and([__inDomain(1,int(1..2));int(1..)])} 

--

allDiff({a[..,1] @ and([__inDomain(1,int(1..2));int(1..)])}),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1) 

--

a[..,2], 
   ~~> slice_to_bubble ([("Bubble", 6000)]) 
{a[..,2] @ and([__inDomain(2,int(1..2));int(1..)])} 

--

allDiff(a[..,1]),
allDiff({a[..,2] @ and([__inDomain(2,int(1..2));int(1..)])}),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1) 

--

a[1,..], 
   ~~> slice_to_bubble ([("Bubble", 6000)]) 
{a[1,..] @ and([__inDomain(1,int(1..3));int(1..)])} 

--

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff({a[1,..] @ and([__inDomain(1,int(1..3));int(1..)])}),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1) 

--

a[2,..], 
   ~~> slice_to_bubble ([("Bubble", 6000)]) 
{a[2,..] @ and([__inDomain(2,int(1..3));int(1..)])} 

--

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff({a[2,..] @ and([__inDomain(2,int(1..3));int(1..)])}),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1) 

--

a[3,..], 
   ~~> slice_to_bubble ([("Bubble", 6000)]) 
{a[3,..] @ and([__inDomain(3,int(1..3));int(1..)])} 

--

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff({a[3,..] @ and([__inDomain(3,int(1..3));int(1..)])}),
(a[1, 1] = 1),
(a[2, 3] = 1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1) 

--

a[1, 1], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{a[1, 1] @ and([__inDomain(1,int(1..3)),__inDomain(1,int(1..2));int(1..)])} 

--

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
({a[1, 1] @ and([__inDomain(1,int(1..3)),__inDomain(1,int(1..2));int(1..)])} = 1),
(a[2, 3] = 1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
(a[2, 3] = 1) 

--

a[2, 3], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{a[2, 3] @ and([__inDomain(2,int(1..3)),__inDomain(3,int(1..2));int(1..)])} 

--

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
({a[2, 3] @ and([__inDomain(2,int(1..3)),__inDomain(3,int(1..2));int(1..)])} = 1), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
({a[2, 3] @ false} = 1) 

--

({a[2, 3] @ false} = 1), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(a[2, 3] = 1) @ and([false;int(1..)])} 

--

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
{(a[2, 3] = 1) @ and([false;int(1..)])}, 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
{(a[2, 3] = 1) @ false} 

--

{(a[2, 3] = 1) @ false}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(a[2, 3] = 1),false;int(1..)]) 

--

allDiff(a[..,1]),
allDiff(a[..,2]),
allDiff(a[1,..]),
allDiff(a[2,..]),
allDiff(a[3,..]),
(a[1, 1] = 1),
and([(a[2, 3] = 1),false;int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
false 

--

false, 
   ~~> substitute_domain_lettings ([("Base", 5000)]) 
false 

--

false, 
   ~~> select_representation_matrix ([("Base", 8001)]) 
false 
new variables:
  find a#matrix_to_atom_1_1: int(1..3)
  find a#matrix_to_atom_1_2: int(1..3)
  find a#matrix_to_atom_2_1: int(1..3)
  find a#matrix_to_atom_2_2: int(1..3)
  find a#matrix_to_atom_3_1: int(1..3)
  find a#matrix_to_atom_3_2: int(1..3)
--

Final model:

letting MATRIX be domain matrix indexed by [[int(1..3), int(1..2)]] of int(1..3)
find a: matrix indexed by [[int(1..3), int(1..2)]] of int(1..3)
find a#matrix_to_atom_1_1: int(1..3)
find a#matrix_to_atom_1_2: int(1..3)
find a#matrix_to_atom_2_1: int(1..3)
find a#matrix_to_atom_2_2: int(1..3)
find a#matrix_to_atom_3_1: int(1..3)
find a#matrix_to_atom_3_2: int(1..3)

such that

false

