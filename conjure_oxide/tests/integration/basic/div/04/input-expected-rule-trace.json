{"message":"Rule applicable: div_to_bubble ([(\"Bubble\", 6000)]), to expression: UnsafeDiv(b, c), resulting in: {SafeDiv(b, c) @ (c != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: (a = {SafeDiv(b, c) @ (c != 0)}), resulting in: {(a = SafeDiv(b, c)) @ And([(c != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {(a = SafeDiv(b, c)) @ And([(c != 0)])}, resulting in: And([(a = SafeDiv(b, c)), And([(c != 0)])])","target":"rule_engine"}
{"message":"Rule applicable: distribute_not_over_and ([(\"Base\", 8400)]), to expression: Not(And([(a = SafeDiv(b, c)), And([(c != 0)])])), resulting in: Or([Not((a = SafeDiv(b, c))), Not(And([(c != 0)]))])","target":"rule_engine"}
{"message":"Rule applicable: negated_eq_to_neq ([(\"Base\", 8800)]), to expression: Not((a = SafeDiv(b, c))), resulting in: (a != SafeDiv(b, c))","target":"rule_engine"}
{"message":"Rule applicable: flatten_binop ([(\"Minion\", 4400)]), to expression: (a != SafeDiv(b, c)), resulting in: (a != __0)","target":"rule_engine"}
{"message":"Rule applicable: distribute_not_over_and ([(\"Base\", 8400)]), to expression: Not(And([(c != 0)])), resulting in: Not((c != 0))","target":"rule_engine"}
{"message":"Rule applicable: negated_neq_to_eq ([(\"Base\", 8800)]), to expression: Not((c != 0)), resulting in: (c = 0)","target":"rule_engine"}
{"message":"Rule applicable: introduce_diveq ([(\"Minion\", 4200)]), to expression: __0 =aux SafeDiv(b, c), resulting in: DivEq(b, c, __0)","target":"rule_engine"}
{"count":9,"message":" Number of rules applied"}
