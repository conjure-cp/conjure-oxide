
Model before rewriting:

find a: int(0..3)
find b: int(0..3)
find c: int(0..3)

such that

(a != UnsafeDiv(b, c))

--

Successful Tranformation: 
UnsafeDiv(b, c), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(b, c) @ (c != 0)}


--

Successful Tranformation: 
(a != {SafeDiv(b, c) @ (c != 0)}), 
~~> bubble_up [8900; Bubble]
{(a != SafeDiv(b, c)) @ and([(c != 0);int(1..)])}


--

Successful Tranformation: 
{(a != SafeDiv(b, c)) @ and([(c != 0);int(1..)])}, 
~~> expand_bubble [8900; Bubble]
and([(a != SafeDiv(b, c)),and([(c != 0);int(1..)]);int(1..)])


--

Successful Tranformation: 
and([(a != SafeDiv(b, c)),and([(c != 0);int(1..)]);int(1..)]), 
~~> partial_evaluator [9000; Base]
(a != SafeDiv(b, c)),
and([(c != 0);int(1..)])


--

Successful Tranformation: 
(a != SafeDiv(b, c)),
and([(c != 0);int(1..)]), 
~~> partial_evaluator [9000; Base]
(a != SafeDiv(b, c)),
(c != 0)


--

Successful Tranformation: 
(a != SafeDiv(b, c)), 
~~> flatten_generic [4200; Minion]
(a != __0)
new variables:
  find __0: int(0..3)
new constraints:
  __0 =aux SafeDiv(b, c)

--

Successful Tranformation: 
__0 =aux SafeDiv(b, c), 
~~> introduce_diveq [4200; Minion]
DivEq(b, c, __0)


--


Final model:

find a: int(0..3)
find b: int(0..3)
find c: int(0..3)
find __0: int(0..3)

such that

(a != __0),
(c != 0),
DivEq(b, c, __0)

