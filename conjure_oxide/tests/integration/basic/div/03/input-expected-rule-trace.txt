
Model before rewriting:

find a: int(0..9)

such that

(2 = UnsafeDiv(8, a))

--

Successful Tranformation: 
UnsafeDiv(8, a), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(8, a) @ (a != 0)}


--

Successful Tranformation: 
(2 = {SafeDiv(8, a) @ (a != 0)}), 
~~> bubble_up [8900; Bubble]
{(2 = SafeDiv(8, a)) @ and([(a != 0);int(1..)])}


--

Successful Tranformation: 
{(2 = SafeDiv(8, a)) @ and([(a != 0);int(1..)])}, 
~~> expand_bubble [8900; Bubble]
and([(2 = SafeDiv(8, a)),and([(a != 0);int(1..)]);int(1..)])


--

Successful Tranformation: 
and([(2 = SafeDiv(8, a)),and([(a != 0);int(1..)]);int(1..)]), 
~~> partial_evaluator [9000; Base]
(2 = SafeDiv(8, a)),
and([(a != 0);int(1..)])


--

Successful Tranformation: 
(2 = SafeDiv(8, a)),
and([(a != 0);int(1..)]), 
~~> partial_evaluator [9000; Base]
(2 = SafeDiv(8, a)),
(a != 0)


--

Successful Tranformation: 
(2 = SafeDiv(8, a)), 
~~> introduce_diveq [4200; Minion]
DivEq(8, a, 2)


--


Final model:

find a: int(0..9)

such that

DivEq(8, a, 2),
(a != 0)

