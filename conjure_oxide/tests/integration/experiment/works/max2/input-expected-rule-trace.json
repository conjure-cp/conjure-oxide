{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (Max([a, b]) >= 2), resulting in: Ineq(2, Max([a, b]), 0)","target":"rule_engine"}
{"message":"Rule applicable: max_to_var ([(\"Base\", 100)]), to expression: Max([a, b]), resulting in: __0","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), (x = Sum([Max([a, b]), 1])), And([(__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])])]), resulting in: And([Ineq(2, __0, 0), (x = Sum([Max([a, b]), 1])), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: (x = Sum([Max([a, b]), 1])), resulting in: SumEq([Max([a, b]), 1], x)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Max([a, b]), 1], x), resulting in: And([SumGeq([Max([a, b]), 1], x), SumLeq([Max([a, b]), 1], x)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), And([SumGeq([Max([a, b]), 1], x), SumLeq([Max([a, b]), 1], x)]), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])]), resulting in: And([Ineq(2, __0, 0), SumGeq([Max([a, b]), 1], x), SumLeq([Max([a, b]), 1], x), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Max([a, b]), 1], x), resulting in: SumGeq([__1, 1], x)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Max([a, b]), 1], x), resulting in: SumLeq([__2, 1], x)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__0 >= a), resulting in: Ineq(a, __0, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__0 >= b), resulting in: Ineq(b, __0, 0)","target":"rule_engine"}
{"message":"Rule applicable: max_to_var ([(\"Base\", 100)]), to expression: Max([a, b]), resulting in: __3","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([__2, 1], x), Ineq(a, __0, 0), Ineq(b, __0, 0), Or([(__0 = a), (__0 = b)]), __1 =aux __3, __2 =aux Max([a, b]), And([(__3 >= a), (__3 >= b), Or([(__3 = a), (__3 = b)])])]), resulting in: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([__2, 1], x), Ineq(a, __0, 0), Ineq(b, __0, 0), Or([(__0 = a), (__0 = b)]), __1 =aux __3, __2 =aux Max([a, b]), (__3 >= a), (__3 >= b), Or([(__3 = a), (__3 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: max_to_var ([(\"Base\", 100)]), to expression: Max([a, b]), resulting in: __4","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([__2, 1], x), Ineq(a, __0, 0), Ineq(b, __0, 0), Or([(__0 = a), (__0 = b)]), __1 =aux __3, __2 =aux __4, (__3 >= a), (__3 >= b), Or([(__3 = a), (__3 = b)]), And([(__4 >= a), (__4 >= b), Or([(__4 = a), (__4 = b)])])]), resulting in: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([__2, 1], x), Ineq(a, __0, 0), Ineq(b, __0, 0), Or([(__0 = a), (__0 = b)]), __1 =aux __3, __2 =aux __4, (__3 >= a), (__3 >= b), Or([(__3 = a), (__3 = b)]), (__4 >= a), (__4 >= b), Or([(__4 = a), (__4 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__3 >= a), resulting in: Ineq(a, __3, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__3 >= b), resulting in: Ineq(b, __3, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__4 >= a), resulting in: Ineq(a, __4, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__4 >= b), resulting in: Ineq(b, __4, 0)","target":"rule_engine"}
{"count":18,"message":" Number of rules applied"}
