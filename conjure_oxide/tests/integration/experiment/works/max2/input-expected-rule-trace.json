{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (Max([a, b]) >= 2), resulting in: Ineq(2, Max([a, b]), 0)","target":"rule_engine"}
{"message":"Rule applicable: max_to_var ([(\"Base\", 100)]), to expression: Max([a, b]), resulting in: __0","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), (x = Sum([Max([a, b]), 1])), And([(__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])])]), resulting in: And([Ineq(2, __0, 0), (x = Sum([Max([a, b]), 1])), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: (x = Sum([Max([a, b]), 1])), resulting in: SumEq([Max([a, b]), 1], x)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Max([a, b]), 1], x), resulting in: And([SumGeq([Max([a, b]), 1], x), SumLeq([Max([a, b]), 1], x)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), And([SumGeq([Max([a, b]), 1], x), SumLeq([Max([a, b]), 1], x)]), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])]), resulting in: And([Ineq(2, __0, 0), SumGeq([Max([a, b]), 1], x), SumLeq([Max([a, b]), 1], x), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: max_to_var ([(\"Base\", 100)]), to expression: Max([a, b]), resulting in: __1","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([Max([a, b]), 1], x), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)]), And([(__1 >= a), (__1 >= b), Or([(__1 = a), (__1 = b)])])]), resulting in: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([Max([a, b]), 1], x), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)]), (__1 >= a), (__1 >= b), Or([(__1 = a), (__1 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: max_to_var ([(\"Base\", 100)]), to expression: Max([a, b]), resulting in: __2","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([__2, 1], x), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)]), (__1 >= a), (__1 >= b), Or([(__1 = a), (__1 = b)]), And([(__2 >= a), (__2 >= b), Or([(__2 = a), (__2 = b)])])]), resulting in: And([Ineq(2, __0, 0), SumGeq([__1, 1], x), SumLeq([__2, 1], x), (__0 >= a), (__0 >= b), Or([(__0 = a), (__0 = b)]), (__1 >= a), (__1 >= b), Or([(__1 = a), (__1 = b)]), (__2 >= a), (__2 >= b), Or([(__2 = a), (__2 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__0 >= a), resulting in: Ineq(a, __0, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__0 >= b), resulting in: Ineq(b, __0, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__1 >= a), resulting in: Ineq(a, __1, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__1 >= b), resulting in: Ineq(b, __1, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__2 >= a), resulting in: Ineq(a, __2, 0)","target":"rule_engine"}
{"message":"Rule applicable: geq_to_ineq ([(\"Minion\", 4100)]), to expression: (__2 >= b), resulting in: Ineq(b, __2, 0)","target":"rule_engine"}
{"count":16,"message":" Number of rules applied"}
