Model before rewriting:

find a: int(1..4)
find b: int(1..4)
find x: int(1..4)

such that

(max([a,b;int(1..2)]) >= 2),
(x = Sum([max([a,b;int(1..2)]),1;int(1..2)]))

--

max([a,b;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
max([a,b;int(1..)]) 

--

max([a,b;int(1..)]), 
   ~~> max_to_var ([("Base", 6000)]) 
__0 
new variables:
  find __0: int(1..4)
new constraints:
  (__0 >= a)
  (__0 >= b)
  or([(__0 = a),(__0 = b);int(1..)])
--

(__0 >= 2), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(2, __0, 0) 

--

(__0 >= a), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(a, __0, 0) 

--

(__0 >= b), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(b, __0, 0) 

--

Sum([max([a,b;int(1..2)]),1;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
Sum([max([a,b;int(1..2)]),1;int(1..)]) 

--

max([a,b;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
max([a,b;int(1..)]) 

--

max([a,b;int(1..)]), 
   ~~> max_to_var ([("Base", 6000)]) 
__1 
new variables:
  find __1: int(1..4)
new constraints:
  (__1 >= a)
  (__1 >= b)
  or([(__1 = a),(__1 = b);int(1..)])
--

(x = Sum([__1,1;int(1..)])), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([__1, 1], x),SumGeq([__1, 1], x);int(1..)]) 

--

Ineq(2, __0, 0),
and([SumLeq([__1, 1], x),SumGeq([__1, 1], x);int(1..)]),
Ineq(a, __0, 0),
Ineq(b, __0, 0),
or([(__0 = a),(__0 = b);int(1..)]),
(__1 >= a),
(__1 >= b),
or([(__1 = a),(__1 = b);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
Ineq(2, __0, 0),
SumLeq([__1, 1], x),
SumGeq([__1, 1], x),
Ineq(a, __0, 0),
Ineq(b, __0, 0),
or([(__0 = a),(__0 = b);int(1..)]),
(__1 >= a),
(__1 >= b),
or([(__1 = a),(__1 = b);int(1..)]) 

--

(__1 >= a), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(a, __1, 0) 

--

(__1 >= b), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(b, __1, 0) 

--

Final model:

find a: int(1..4)
find b: int(1..4)
find x: int(1..4)
find __0: int(1..4)
find __1: int(1..4)

such that

Ineq(2, __0, 0),
SumLeq([__1, 1], x),
SumGeq([__1, 1], x),
Ineq(a, __0, 0),
Ineq(b, __0, 0),
or([(__0 = a),(__0 = b);int(1..)]),
Ineq(a, __1, 0),
Ineq(b, __1, 0),
or([(__1 = a),(__1 = b);int(1..)])

