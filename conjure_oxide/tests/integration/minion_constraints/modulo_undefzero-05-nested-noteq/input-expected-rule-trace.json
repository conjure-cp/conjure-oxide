{"message":"Rule applicable: mod_to_bubble ([(\"Bubble\", 6000)]), to expression: y % z, resulting in: {SafeMod(y,z) @ (z != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: x % {SafeMod(y,z) @ (z != 0)}, resulting in: {x % SafeMod(y,z) @ And([(z != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: ({x % SafeMod(y,z) @ And([(z != 0)])} = 3), resulting in: {(x % SafeMod(y,z) = 3) @ And([And([(z != 0)])])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {(x % SafeMod(y,z) = 3) @ And([And([(z != 0)])])}, resulting in: And([(x % SafeMod(y,z) = 3), And([And([(z != 0)])])])","target":"rule_engine"}
{"message":"Rule applicable: mod_to_bubble ([(\"Bubble\", 6000)]), to expression: x % SafeMod(y,z), resulting in: {SafeMod(x,SafeMod(y,z)) @ (SafeMod(y,z) != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: ({SafeMod(x,SafeMod(y,z)) @ (SafeMod(y,z) != 0)} = 3), resulting in: {(SafeMod(x,SafeMod(y,z)) = 3) @ And([(SafeMod(y,z) != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {(SafeMod(x,SafeMod(y,z)) = 3) @ And([(SafeMod(y,z) != 0)])}, resulting in: And([(SafeMod(x,SafeMod(y,z)) = 3), And([(SafeMod(y,z) != 0)])])","target":"rule_engine"}
{"message":"Rule applicable: distribute_not_over_and ([(\"Base\", 8400)]), to expression: Not(And([And([(SafeMod(x,SafeMod(y,z)) = 3), And([(SafeMod(y,z) != 0)])]), And([And([(z != 0)])])])), resulting in: Or([Not(And([(SafeMod(x,SafeMod(y,z)) = 3), And([(SafeMod(y,z) != 0)])])), Not(And([And([(z != 0)])]))])","target":"rule_engine"}
{"message":"Rule applicable: distribute_not_over_and ([(\"Base\", 8400)]), to expression: Not(And([(SafeMod(x,SafeMod(y,z)) = 3), And([(SafeMod(y,z) != 0)])])), resulting in: Or([Not((SafeMod(x,SafeMod(y,z)) = 3)), Not(And([(SafeMod(y,z) != 0)]))])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: Or([Or([Not((SafeMod(x,SafeMod(y,z)) = 3)), Not(And([(SafeMod(y,z) != 0)]))]), Not(And([And([(z != 0)])]))]), resulting in: Or([Not((SafeMod(x,SafeMod(y,z)) = 3)), Not(And([(SafeMod(y,z) != 0)])), Not(And([And([(z != 0)])]))])","target":"rule_engine"}
{"message":"Rule applicable: negated_eq_to_neq ([(\"Base\", 8800)]), to expression: Not((SafeMod(x,SafeMod(y,z)) = 3)), resulting in: (SafeMod(x,SafeMod(y,z)) != 3)","target":"rule_engine"}
{"message":"Rule applicable: flatten_binop ([(\"Minion\", 4400)]), to expression: (SafeMod(x,SafeMod(y,z)) != 3), resulting in: (__0 != 3)","target":"rule_engine"}
{"message":"Rule applicable: distribute_not_over_and ([(\"Base\", 8400)]), to expression: Not(And([(SafeMod(y,z) != 0)])), resulting in: Not((SafeMod(y,z) != 0))","target":"rule_engine"}
{"message":"Rule applicable: negated_neq_to_eq ([(\"Base\", 8800)]), to expression: Not((SafeMod(y,z) != 0)), resulting in: (SafeMod(y,z) = 0)","target":"rule_engine"}
{"message":"Rule applicable: introduce_modeq ([(\"Minion\", 4200)]), to expression: (SafeMod(y,z) = 0), resulting in: ModEq(y, z, 0)","target":"rule_engine"}
{"message":"Rule applicable: distribute_not_over_and ([(\"Base\", 8400)]), to expression: Not(And([And([(z != 0)])])), resulting in: Not(And([(z != 0)]))","target":"rule_engine"}
{"message":"Rule applicable: distribute_not_over_and ([(\"Base\", 8400)]), to expression: Not(And([(z != 0)])), resulting in: Not((z != 0))","target":"rule_engine"}
{"message":"Rule applicable: negated_neq_to_eq ([(\"Base\", 8800)]), to expression: Not((z != 0)), resulting in: (z = 0)","target":"rule_engine"}
{"message":"Rule applicable: flatten_binop ([(\"Minion\", 4400)]), to expression: SafeMod(x,SafeMod(y,z)), resulting in: SafeMod(x,__1)","target":"rule_engine"}
{"message":"Rule applicable: introduce_modeq ([(\"Minion\", 4200)]), to expression: __0 =aux SafeMod(x,__1), resulting in: ModEq(x, __1, __0)","target":"rule_engine"}
{"message":"Rule applicable: introduce_modeq ([(\"Minion\", 4200)]), to expression: __1 =aux SafeMod(y,z), resulting in: ModEq(y, z, __1)","target":"rule_engine"}
{"count":21,"message":" Number of rules applied"}
