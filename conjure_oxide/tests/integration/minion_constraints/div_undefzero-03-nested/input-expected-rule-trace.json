{"message":"Rule applicable: div_to_bubble ([(\"Bubble\", 6000)]), to expression: UnsafeDiv(y, z), resulting in: {SafeDiv(y, z) @ (z != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: UnsafeDiv(x, {SafeDiv(y, z) @ (z != 0)}), resulting in: {UnsafeDiv(x, SafeDiv(y, z)) @ And([(z != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: ({UnsafeDiv(x, SafeDiv(y, z)) @ And([(z != 0)])} = 10), resulting in: {(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ And([And([(z != 0)])])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ And([And([(z != 0)])])}, resulting in: And([(UnsafeDiv(x, SafeDiv(y, z)) = 10), And([And([(z != 0)])])])","target":"rule_engine"}
{"message":"Rule applicable: div_to_bubble ([(\"Bubble\", 6000)]), to expression: UnsafeDiv(x, SafeDiv(y, z)), resulting in: {SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)}","target":"rule_engine"}
{"message":"Rule applicable: bubble_up ([(\"Bubble\", 8900)]), to expression: ({SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)} = 10), resulting in: {(SafeDiv(x, SafeDiv(y, z)) = 10) @ And([(SafeDiv(y, z) != 0)])}","target":"rule_engine"}
{"message":"Rule applicable: expand_bubble ([(\"Bubble\", 8900)]), to expression: {(SafeDiv(x, SafeDiv(y, z)) = 10) @ And([(SafeDiv(y, z) != 0)])}, resulting in: And([(SafeDiv(x, SafeDiv(y, z)) = 10), And([(SafeDiv(y, z) != 0)])])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([And([(SafeDiv(x, SafeDiv(y, z)) = 10), And([(SafeDiv(y, z) != 0)])]), And([And([(z != 0)])])]), resulting in: And([(SafeDiv(x, SafeDiv(y, z)) = 10), (SafeDiv(y, z) != 0), (z != 0)])","target":"rule_engine"}
{"message":"Rule applicable: flatten_binop ([(\"Minion\", 4400)]), to expression: SafeDiv(x, SafeDiv(y, z)), resulting in: SafeDiv(x, __0)","target":"rule_engine"}
{"message":"Rule applicable: introduce_diveq ([(\"Minion\", 4200)]), to expression: (SafeDiv(x, __0) = 10), resulting in: DivEq(x, __0, 10)","target":"rule_engine"}
{"message":"Rule applicable: flatten_binop ([(\"Minion\", 4400)]), to expression: (SafeDiv(y, z) != 0), resulting in: (__1 != 0)","target":"rule_engine"}
{"message":"Rule applicable: introduce_diveq ([(\"Minion\", 4200)]), to expression: __0 =aux SafeDiv(y, z), resulting in: DivEq(y, z, __0)","target":"rule_engine"}
{"message":"Rule applicable: introduce_diveq ([(\"Minion\", 4200)]), to expression: __1 =aux SafeDiv(y, z), resulting in: DivEq(y, z, __1)","target":"rule_engine"}
{"count":13,"message":" Number of rules applied"}
