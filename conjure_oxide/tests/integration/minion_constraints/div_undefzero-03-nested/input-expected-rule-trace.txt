
Model before rewriting:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)

such that

(UnsafeDiv(x, UnsafeDiv(y, z)) = 10)

--

Successful Tranformation: 
UnsafeDiv(y, z), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(y, z) @ (z != 0)}


--

Successful Tranformation: 
UnsafeDiv(x, {SafeDiv(y, z) @ (z != 0)}), 
~~> bubble_up [8900; Bubble]
{UnsafeDiv(x, SafeDiv(y, z)) @ and([(z != 0);int(1..)])}


--

Successful Tranformation: 
({UnsafeDiv(x, SafeDiv(y, z)) @ and([(z != 0);int(1..)])} = 10), 
~~> bubble_up [8900; Bubble]
{(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ and([and([(z != 0);int(1..)]);int(1..)])}


--

Successful Tranformation: 
{(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ and([and([(z != 0);int(1..)]);int(1..)])}, 
~~> expand_bubble [8900; Bubble]
and([(UnsafeDiv(x, SafeDiv(y, z)) = 10),and([and([(z != 0);int(1..)]);int(1..)]);int(1..)])


--

Successful Tranformation: 
and([(UnsafeDiv(x, SafeDiv(y, z)) = 10),and([and([(z != 0);int(1..)]);int(1..)]);int(1..)]), 
~~> partial_evaluator [9000; Base]
(UnsafeDiv(x, SafeDiv(y, z)) = 10),
and([and([(z != 0);int(1..)]);int(1..)])


--

Successful Tranformation: 
(UnsafeDiv(x, SafeDiv(y, z)) = 10),
and([and([(z != 0);int(1..)]);int(1..)]), 
~~> partial_evaluator [9000; Base]
(UnsafeDiv(x, SafeDiv(y, z)) = 10),
and([(z != 0);int(1..)])


--

Successful Tranformation: 
(UnsafeDiv(x, SafeDiv(y, z)) = 10),
and([(z != 0);int(1..)]), 
~~> partial_evaluator [9000; Base]
(UnsafeDiv(x, SafeDiv(y, z)) = 10),
(z != 0)


--

Successful Tranformation: 
UnsafeDiv(x, SafeDiv(y, z)), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)}


--

Successful Tranformation: 
({SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)} = 10), 
~~> bubble_up [8900; Bubble]
{(SafeDiv(x, SafeDiv(y, z)) = 10) @ and([(SafeDiv(y, z) != 0);int(1..)])}


--

Successful Tranformation: 
{(SafeDiv(x, SafeDiv(y, z)) = 10) @ and([(SafeDiv(y, z) != 0);int(1..)])}, 
~~> expand_bubble [8900; Bubble]
and([(SafeDiv(x, SafeDiv(y, z)) = 10),and([(SafeDiv(y, z) != 0);int(1..)]);int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(x, SafeDiv(y, z)) = 10),and([(SafeDiv(y, z) != 0);int(1..)]);int(1..)]),
(z != 0), 
~~> partial_evaluator [9000; Base]
(SafeDiv(x, SafeDiv(y, z)) = 10),
and([(SafeDiv(y, z) != 0);int(1..)]),
(z != 0)


--

Successful Tranformation: 
(SafeDiv(x, SafeDiv(y, z)) = 10),
and([(SafeDiv(y, z) != 0);int(1..)]),
(z != 0), 
~~> partial_evaluator [9000; Base]
(SafeDiv(x, SafeDiv(y, z)) = 10),
(SafeDiv(y, z) != 0),
(z != 0)


--

Successful Tranformation: 
SafeDiv(x, SafeDiv(y, z)), 
~~> flatten_generic [4200; Minion]
SafeDiv(x, __0)
new variables:
  find __0: int(0..5)
new constraints:
  __0 =aux SafeDiv(y, z)

--

Successful Tranformation: 
(SafeDiv(x, __0) = 10), 
~~> introduce_diveq [4200; Minion]
DivEq(x, __0, 10)


--

Successful Tranformation: 
(SafeDiv(y, z) != 0), 
~~> flatten_generic [4200; Minion]
(__1 != 0)
new variables:
  find __1: int(0..5)
new constraints:
  __1 =aux SafeDiv(y, z)

--

Successful Tranformation: 
__0 =aux SafeDiv(y, z), 
~~> introduce_diveq [4200; Minion]
DivEq(y, z, __0)


--

Successful Tranformation: 
__1 =aux SafeDiv(y, z), 
~~> introduce_diveq [4200; Minion]
DivEq(y, z, __1)


--


Final model:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)
find __0: int(0..5)
find __1: int(0..5)

such that

DivEq(x, __0, 10),
(__1 != 0),
(z != 0),
DivEq(y, z, __0),
DivEq(y, z, __1)

