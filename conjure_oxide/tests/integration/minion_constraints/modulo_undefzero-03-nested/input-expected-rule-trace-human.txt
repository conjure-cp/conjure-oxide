Model before rewriting:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)

such that

(x % y % z = 3)

--

y % z, 
   ~~> mod_to_bubble ([("Bubble", 6000)]) 
{SafeMod(y,z) @ (z != 0)} 

--

x % {SafeMod(y,z) @ (z != 0)}, 
   ~~> bubble_up ([("Bubble", 8900)]) 
{x % SafeMod(y,z) @ and([(z != 0);int(1..)])} 

--

({x % SafeMod(y,z) @ and([(z != 0);int(1..)])} = 3), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(x % SafeMod(y,z) = 3) @ and([and([(z != 0);int(1..)]);int(1..)])} 

--

{(x % SafeMod(y,z) = 3) @ and([and([(z != 0);int(1..)]);int(1..)])}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(x % SafeMod(y,z) = 3),and([and([(z != 0);int(1..)]);int(1..)]);int(1..)]) 

--

and([(x % SafeMod(y,z) = 3),and([and([(z != 0);int(1..)]);int(1..)]);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(x % SafeMod(y,z) = 3),
and([and([(z != 0);int(1..)]);int(1..)]) 

--

(x % SafeMod(y,z) = 3),
and([and([(z != 0);int(1..)]);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(x % SafeMod(y,z) = 3),
and([(z != 0);int(1..)]) 

--

(x % SafeMod(y,z) = 3),
and([(z != 0);int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(x % SafeMod(y,z) = 3),
(z != 0) 

--

x % SafeMod(y,z), 
   ~~> mod_to_bubble ([("Bubble", 6000)]) 
{SafeMod(x,SafeMod(y,z)) @ (SafeMod(y,z) != 0)} 

--

({SafeMod(x,SafeMod(y,z)) @ (SafeMod(y,z) != 0)} = 3), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(SafeMod(x,SafeMod(y,z)) = 3) @ and([(SafeMod(y,z) != 0);int(1..)])} 

--

{(SafeMod(x,SafeMod(y,z)) = 3) @ and([(SafeMod(y,z) != 0);int(1..)])}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(SafeMod(x,SafeMod(y,z)) = 3),and([(SafeMod(y,z) != 0);int(1..)]);int(1..)]) 

--

and([(SafeMod(x,SafeMod(y,z)) = 3),and([(SafeMod(y,z) != 0);int(1..)]);int(1..)]),
(z != 0), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(SafeMod(x,SafeMod(y,z)) = 3),
and([(SafeMod(y,z) != 0);int(1..)]),
(z != 0) 

--

(SafeMod(x,SafeMod(y,z)) = 3),
and([(SafeMod(y,z) != 0);int(1..)]),
(z != 0), 
   ~~> partial_evaluator ([("Base", 9000)]) 
(SafeMod(x,SafeMod(y,z)) = 3),
(SafeMod(y,z) != 0),
(z != 0) 

--

SafeMod(x,SafeMod(y,z)), 
   ~~> flatten_generic ([("Minion", 4200)]) 
SafeMod(x,__0) 
new variables:
  find __0: int(0..5)
new constraints:
  __0 =aux SafeMod(y,z)
--

(SafeMod(x,__0) = 3), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(x, __0, 3) 

--

(SafeMod(y,z) != 0), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__1 != 0) 
new variables:
  find __1: int(0..5)
new constraints:
  __1 =aux SafeMod(y,z)
--

__0 =aux SafeMod(y,z), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(y, z, __0) 

--

__1 =aux SafeMod(y,z), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(y, z, __1) 

--

Final model:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)
find __0: int(0..5)
find __1: int(0..5)

such that

ModEq(x, __0, 3),
(__1 != 0),
(z != 0),
ModEq(y, z, __0),
ModEq(y, z, __1)

