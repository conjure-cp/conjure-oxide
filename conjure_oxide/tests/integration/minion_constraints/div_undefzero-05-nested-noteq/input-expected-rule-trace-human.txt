Model before rewriting:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)

such that

Not((UnsafeDiv(x, UnsafeDiv(y, z)) = 10))

--

UnsafeDiv(y, z), 
   ~~> div_to_bubble ([("Bubble", 6000)]) 
{SafeDiv(y, z) @ (z != 0)} 

--

UnsafeDiv(x, {SafeDiv(y, z) @ (z != 0)}), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{UnsafeDiv(x, SafeDiv(y, z)) @ and([(z != 0);int(1..)])} 

--

({UnsafeDiv(x, SafeDiv(y, z)) @ and([(z != 0);int(1..)])} = 10), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ and([and([(z != 0);int(1..)]);int(1..)])} 

--

{(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ and([and([(z != 0);int(1..)]);int(1..)])}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(UnsafeDiv(x, SafeDiv(y, z)) = 10),and([and([(z != 0);int(1..)]);int(1..)]);int(1..)]) 

--

and([and([(z != 0);int(1..)]);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
and([(z != 0);int(1..)]) 

--

and([(z != 0);int(1..)]), 
   ~~> remove_unit_vector_and ([("Base", 8800)]) 
(z != 0) 

--

UnsafeDiv(x, SafeDiv(y, z)), 
   ~~> div_to_bubble ([("Bubble", 6000)]) 
{SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)} 

--

({SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)} = 10), 
   ~~> bubble_up ([("Bubble", 8900)]) 
{(SafeDiv(x, SafeDiv(y, z)) = 10) @ and([(SafeDiv(y, z) != 0);int(1..)])} 

--

{(SafeDiv(x, SafeDiv(y, z)) = 10) @ and([(SafeDiv(y, z) != 0);int(1..)])}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(SafeDiv(x, SafeDiv(y, z)) = 10),and([(SafeDiv(y, z) != 0);int(1..)]);int(1..)]) 

--

and([and([(SafeDiv(x, SafeDiv(y, z)) = 10),and([(SafeDiv(y, z) != 0);int(1..)]);int(1..)]),(z != 0);int(1..)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
and([(SafeDiv(x, SafeDiv(y, z)) = 10),(SafeDiv(y, z) != 0),(z != 0);int(1..)]) 

--

Not(and([(SafeDiv(x, SafeDiv(y, z)) = 10),(SafeDiv(y, z) != 0),(z != 0);int(1..)])), 
   ~~> distribute_not_over_and ([("Base", 8400)]) 
or([Not((SafeDiv(x, SafeDiv(y, z)) = 10)),Not((SafeDiv(y, z) != 0)),Not((z != 0));int(1..)]) 

--

Not((SafeDiv(x, SafeDiv(y, z)) = 10)), 
   ~~> negated_eq_to_neq ([("Base", 8800)]) 
(SafeDiv(x, SafeDiv(y, z)) != 10) 

--

Not((SafeDiv(y, z) != 0)), 
   ~~> negated_neq_to_eq ([("Base", 8800)]) 
(SafeDiv(y, z) = 0) 

--

Not((z != 0)), 
   ~~> negated_neq_to_eq ([("Base", 8800)]) 
(z = 0) 

--

(SafeDiv(x, SafeDiv(y, z)) != 10), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__0 != 10) 
new variables:
  find __0: int(0..20)
new constraints:
  __0 =aux SafeDiv(x, SafeDiv(y, z))
--

(SafeDiv(y, z) = 0), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(y, z, 0) 

--

SafeDiv(x, SafeDiv(y, z)), 
   ~~> flatten_generic ([("Minion", 4200)]) 
SafeDiv(x, __1) 
new variables:
  find __1: int(0..5)
new constraints:
  __1 =aux SafeDiv(y, z)
--

__0 =aux SafeDiv(x, __1), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(x, __1, __0) 

--

__1 =aux SafeDiv(y, z), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(y, z, __1) 

--

Final model:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)
find __0: int(0..20)
find __1: int(0..5)

such that

or([(__0 != 10),DivEq(y, z, 0),(z = 0);int(1..)]),
DivEq(x, __1, __0),
DivEq(y, z, __1)

