{"message":"Rule applicable: sum_leq_to_sumleq ([(\"Minion\", 4400)]), to expression: (Sum([Min([a, b]), 6]) <= 10), resulting in: SumLeq([Min([a, b]), 6], 10)","target":"rule_engine"}
{"message":"Rule applicable: partial_evaluator ([(\"Base\", 9000)]), to expression: SumLeq([Min([a, b]), 6], 10), resulting in: SumLeq([Min([a, b])], 4)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Min([a, b])], 4), resulting in: SumLeq([__0], 4)","target":"rule_engine"}
{"message":"Rule applicable: min_to_var ([(\"Base\", 2000)]), to expression: Min([a, b]), resulting in: __1","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumLeq([__0], 4), __0 =aux __1, And([(__1 <= a), (__1 <= b), Or([(__1 = a), (__1 = b)])])]), resulting in: And([SumLeq([__0], 4), __0 =aux __1, (__1 <= a), (__1 <= b), Or([(__1 = a), (__1 = b)])])","target":"rule_engine"}
{"message":"Rule applicable: leq_to_ineq ([(\"Minion\", 4100)]), to expression: (__1 <= a), resulting in: Ineq(__1, a, 0)","target":"rule_engine"}
{"message":"Rule applicable: leq_to_ineq ([(\"Minion\", 4100)]), to expression: (__1 <= b), resulting in: Ineq(__1, b, 0)","target":"rule_engine"}
{"count":7,"message":" Number of rules applied"}
