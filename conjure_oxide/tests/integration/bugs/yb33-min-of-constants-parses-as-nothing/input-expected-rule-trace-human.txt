Model before rewriting:

find c: int(1..7)

such that

(sum([min([5,7;int(1..2)]),c;int(1..2)]) <= 10)

--

(sum([min([5,7;int(1..2)]),c;int(1..2)]) <= 10), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__0 <= 10) 
new variables:
  find __0: int(6..12)
new constraints:
  __0 =aux sum([min([5,7;int(1..2)]),c;int(1..2)])
--

(__0 <= 10), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__0, 10, 0) 

--

sum([min([5,7;int(1..2)]),c;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
sum([min([5,7;int(1..2)]),c;int(1..)]) 

--

__0 =aux sum([min([5,7;int(1..2)]),c;int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([__1, c], __0),SumGeq([__1, c], __0);int(1..)]) 
new variables:
  find __1: int(5)
new constraints:
  __1 =aux min([5,7;int(1..2)])
--

Ineq(__0, 10, 0),
and([SumLeq([__1, c], __0),SumGeq([__1, c], __0);int(1..)]),
__1 =aux min([5,7;int(1..2)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
Ineq(__0, 10, 0),
SumLeq([__1, c], __0),
SumGeq([__1, c], __0),
__1 =aux min([5,7;int(1..2)]) 

--

min([5,7;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
min([5,7;int(1..)]) 

--

Ineq(__0, 10, 0),
SumLeq([__1, c], __0),
SumGeq([__1, c], __0),
__1 =aux min([5,7;int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
Ineq(__0, 10, 0),
SumLeq([__1, c], __0),
SumGeq([__1, c], __0),
__1 =aux 5 

--

Final model:

find c: int(1..7)
find __0: int(6..12)
find __1: int(5)

such that

Ineq(__0, 10, 0),
SumLeq([__1, c], __0),
SumGeq([__1, c], __0),
__1 =aux 5

