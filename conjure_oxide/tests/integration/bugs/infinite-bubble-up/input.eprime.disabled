
$ disabled as this is a very slow test

$ This input model was infinitely calling bubbling_up, keeping the expression
$ inside the bubble the same.

$ --

$ {{sum([[81,3,35,28,94,86,69,75,4,11;int(1..10)][j],-([81,3,35,28,94,86,69,75,4,11;int(1..10)][i]);int(1..)]) @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(j,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])} @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(i,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])},
$    ~~> bubble_up ([("Bubble", 8900)])
$ {{sum([[81,3,35,28,94,86,69,75,4,11;int(1..10)][j],-([81,3,35,28,94,86,69,75,4,11;int(1..10)][i]);int(1..)]) @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(i,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])} @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(j,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])}

$ --

$ {{sum([[81,3,35,28,94,86,69,75,4,11;int(1..10)][j],-([81,3,35,28,94,86,69,75,4,11;int(1..10)][i]);int(1..)]) @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(i,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])} @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(j,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])},
$    ~~> bubble_up ([("Bubble", 8900)])
$ {{sum([[81,3,35,28,94,86,69,75,4,11;int(1..10)][j],-([81,3,35,28,94,86,69,75,4,11;int(1..10)][i]);int(1..)]) @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(j,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])} @ and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([and([__inDomain(i,int(1..10));int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)]);int(1..)])}

$ --

letting n be 5
letting number_of_clusters be 3
letting x be [81,3,35,28,94]
letting y be [14,94,31,17,13]


find colour : matrix [int(1..n), int(1..n)] of int(0..number_of_clusters)

such that
$ Colinear sequences must not reuse the same colour on adjacent edges
    forAll i, j, k : int(1..n) .
        i != j /\ j != k /\ i != k /\
        ( (x[j] - x[i]) * (y[k] - y[i]) = (x[k] - x[i]) * (y[j] - y[i]) ) ->
            !(colour[i,j] != 0 /\ colour[j,k] != 0 /\ colour[i,j] = colour[j,k])

