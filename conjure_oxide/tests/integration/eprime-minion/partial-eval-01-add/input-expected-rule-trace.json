{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: (Sum([Sum([Sum([Sum([x, 10]), 20]), y]), 5]) = 100), resulting in: SumEq([Sum([Sum([Sum([x, 10]), 20]), y]), 5], 100)","target":"rule_engine"}
{"message":"Rule applicable: partial_evaluator ([(\"Base\", 9000)]), to expression: SumEq([Sum([Sum([Sum([x, 10]), 20]), y]), 5], 100), resulting in: SumEq([Sum([Sum([Sum([x, 10]), 20]), y])], 95)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Sum([Sum([Sum([x, 10]), 20]), y])], 95), resulting in: And([SumGeq([Sum([Sum([Sum([x, 10]), 20]), y])], 95), SumLeq([Sum([Sum([Sum([x, 10]), 20]), y])], 95)])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Sum([Sum([Sum([x, 10]), 20]), y])], 95), resulting in: SumGeq([__0], 95)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Sum([Sum([Sum([x, 10]), 20]), y])], 95), resulting in: SumLeq([__1], 95)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __0 =aux Sum([Sum([Sum([x, 10]), 20]), y]), resulting in: SumEq([Sum([Sum([x, 10]), 20]), y], __0)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Sum([Sum([x, 10]), 20]), y], __0), resulting in: And([SumGeq([Sum([Sum([x, 10]), 20]), y], __0), SumLeq([Sum([Sum([x, 10]), 20]), y], __0)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), And([SumGeq([Sum([Sum([x, 10]), 20]), y], __0), SumLeq([Sum([Sum([x, 10]), 20]), y], __0)]), __1 =aux Sum([Sum([Sum([x, 10]), 20]), y])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([Sum([Sum([x, 10]), 20]), y], __0), SumLeq([Sum([Sum([x, 10]), 20]), y], __0), __1 =aux Sum([Sum([Sum([x, 10]), 20]), y])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Sum([Sum([x, 10]), 20]), y], __0), resulting in: SumGeq([__2, y], __0)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Sum([Sum([x, 10]), 20]), y], __0), resulting in: SumLeq([__3, y], __0)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __1 =aux Sum([Sum([Sum([x, 10]), 20]), y]), resulting in: SumEq([Sum([Sum([x, 10]), 20]), y], __1)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Sum([Sum([x, 10]), 20]), y], __1), resulting in: And([SumGeq([Sum([Sum([x, 10]), 20]), y], __1), SumLeq([Sum([Sum([x, 10]), 20]), y], __1)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), And([SumGeq([Sum([Sum([x, 10]), 20]), y], __1), SumLeq([Sum([Sum([x, 10]), 20]), y], __1)]), __2 =aux Sum([Sum([x, 10]), 20]), __3 =aux Sum([Sum([x, 10]), 20])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([Sum([Sum([x, 10]), 20]), y], __1), SumLeq([Sum([Sum([x, 10]), 20]), y], __1), __2 =aux Sum([Sum([x, 10]), 20]), __3 =aux Sum([Sum([x, 10]), 20])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Sum([Sum([x, 10]), 20]), y], __1), resulting in: SumGeq([__4, y], __1)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Sum([Sum([x, 10]), 20]), y], __1), resulting in: SumLeq([__5, y], __1)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __2 =aux Sum([Sum([x, 10]), 20]), resulting in: SumEq([Sum([x, 10]), 20], __2)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Sum([x, 10]), 20], __2), resulting in: And([SumGeq([Sum([x, 10]), 20], __2), SumLeq([Sum([x, 10]), 20], __2)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), And([SumGeq([Sum([x, 10]), 20], __2), SumLeq([Sum([x, 10]), 20], __2)]), __3 =aux Sum([Sum([x, 10]), 20]), __4 =aux Sum([Sum([x, 10]), 20]), __5 =aux Sum([Sum([x, 10]), 20])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([Sum([x, 10]), 20], __2), SumLeq([Sum([x, 10]), 20], __2), __3 =aux Sum([Sum([x, 10]), 20]), __4 =aux Sum([Sum([x, 10]), 20]), __5 =aux Sum([Sum([x, 10]), 20])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Sum([x, 10]), 20], __2), resulting in: SumGeq([__6, 20], __2)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Sum([x, 10]), 20], __2), resulting in: SumLeq([__7, 20], __2)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __3 =aux Sum([Sum([x, 10]), 20]), resulting in: SumEq([Sum([x, 10]), 20], __3)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Sum([x, 10]), 20], __3), resulting in: And([SumGeq([Sum([x, 10]), 20], __3), SumLeq([Sum([x, 10]), 20], __3)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), And([SumGeq([Sum([x, 10]), 20], __3), SumLeq([Sum([x, 10]), 20], __3)]), __4 =aux Sum([Sum([x, 10]), 20]), __5 =aux Sum([Sum([x, 10]), 20]), __6 =aux Sum([x, 10]), __7 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([Sum([x, 10]), 20], __3), SumLeq([Sum([x, 10]), 20], __3), __4 =aux Sum([Sum([x, 10]), 20]), __5 =aux Sum([Sum([x, 10]), 20]), __6 =aux Sum([x, 10]), __7 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Sum([x, 10]), 20], __3), resulting in: SumGeq([__8, 20], __3)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Sum([x, 10]), 20], __3), resulting in: SumLeq([__9, 20], __3)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __4 =aux Sum([Sum([x, 10]), 20]), resulting in: SumEq([Sum([x, 10]), 20], __4)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Sum([x, 10]), 20], __4), resulting in: And([SumGeq([Sum([x, 10]), 20], __4), SumLeq([Sum([x, 10]), 20], __4)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), And([SumGeq([Sum([x, 10]), 20], __4), SumLeq([Sum([x, 10]), 20], __4)]), __5 =aux Sum([Sum([x, 10]), 20]), __6 =aux Sum([x, 10]), __7 =aux Sum([x, 10]), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([Sum([x, 10]), 20], __4), SumLeq([Sum([x, 10]), 20], __4), __5 =aux Sum([Sum([x, 10]), 20]), __6 =aux Sum([x, 10]), __7 =aux Sum([x, 10]), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Sum([x, 10]), 20], __4), resulting in: SumGeq([__10, 20], __4)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Sum([x, 10]), 20], __4), resulting in: SumLeq([__11, 20], __4)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __5 =aux Sum([Sum([x, 10]), 20]), resulting in: SumEq([Sum([x, 10]), 20], __5)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([Sum([x, 10]), 20], __5), resulting in: And([SumGeq([Sum([x, 10]), 20], __5), SumLeq([Sum([x, 10]), 20], __5)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), And([SumGeq([Sum([x, 10]), 20], __5), SumLeq([Sum([x, 10]), 20], __5)]), __6 =aux Sum([x, 10]), __7 =aux Sum([x, 10]), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([Sum([x, 10]), 20], __5), SumLeq([Sum([x, 10]), 20], __5), __6 =aux Sum([x, 10]), __7 =aux Sum([x, 10]), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumGeq([Sum([x, 10]), 20], __5), resulting in: SumGeq([__12, 20], __5)","target":"rule_engine"}
{"message":"Rule applicable: flatten_vecop ([(\"Minion\", 4400)]), to expression: SumLeq([Sum([x, 10]), 20], __5), resulting in: SumLeq([__13, 20], __5)","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __6 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __6)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __6), resulting in: And([SumGeq([x, 10], __6), SumLeq([x, 10], __6)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), And([SumGeq([x, 10], __6), SumLeq([x, 10], __6)]), __7 =aux Sum([x, 10]), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), __7 =aux Sum([x, 10]), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __7 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __7)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __7), resulting in: And([SumGeq([x, 10], __7), SumLeq([x, 10], __7)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), And([SumGeq([x, 10], __7), SumLeq([x, 10], __7)]), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), __8 =aux Sum([x, 10]), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __8 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __8)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __8), resulting in: And([SumGeq([x, 10], __8), SumLeq([x, 10], __8)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), And([SumGeq([x, 10], __8), SumLeq([x, 10], __8)]), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), __9 =aux Sum([x, 10]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __9 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __9)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __9), resulting in: And([SumGeq([x, 10], __9), SumLeq([x, 10], __9)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), And([SumGeq([x, 10], __9), SumLeq([x, 10], __9)]), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), __10 =aux Sum([x, 10]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __10 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __10)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __10), resulting in: And([SumGeq([x, 10], __10), SumLeq([x, 10], __10)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), And([SumGeq([x, 10], __10), SumLeq([x, 10], __10)]), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), SumGeq([x, 10], __10), SumLeq([x, 10], __10), __11 =aux Sum([x, 10]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __11 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __11)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __11), resulting in: And([SumGeq([x, 10], __11), SumLeq([x, 10], __11)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), SumGeq([x, 10], __10), SumLeq([x, 10], __10), And([SumGeq([x, 10], __11), SumLeq([x, 10], __11)]), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), SumGeq([x, 10], __10), SumLeq([x, 10], __10), SumGeq([x, 10], __11), SumLeq([x, 10], __11), __12 =aux Sum([x, 10]), __13 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __12 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __12)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __12), resulting in: And([SumGeq([x, 10], __12), SumLeq([x, 10], __12)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), SumGeq([x, 10], __10), SumLeq([x, 10], __10), SumGeq([x, 10], __11), SumLeq([x, 10], __11), And([SumGeq([x, 10], __12), SumLeq([x, 10], __12)]), __13 =aux Sum([x, 10])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), SumGeq([x, 10], __10), SumLeq([x, 10], __10), SumGeq([x, 10], __11), SumLeq([x, 10], __11), SumGeq([x, 10], __12), SumLeq([x, 10], __12), __13 =aux Sum([x, 10])])","target":"rule_engine"}
{"message":"Rule applicable: sum_eq_to_sumeq ([(\"Minion\", 4400)]), to expression: __13 =aux Sum([x, 10]), resulting in: SumEq([x, 10], __13)","target":"rule_engine"}
{"message":"Rule applicable: sumeq_to_minion ([(\"Minion\", 4400)]), to expression: SumEq([x, 10], __13), resulting in: And([SumGeq([x, 10], __13), SumLeq([x, 10], __13)])","target":"rule_engine"}
{"message":"Rule applicable: normalise_associative_commutative ([(\"Base\", 8400)]), to expression: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), SumGeq([x, 10], __10), SumLeq([x, 10], __10), SumGeq([x, 10], __11), SumLeq([x, 10], __11), SumGeq([x, 10], __12), SumLeq([x, 10], __12), And([SumGeq([x, 10], __13), SumLeq([x, 10], __13)])]), resulting in: And([SumGeq([__0], 95), SumLeq([__1], 95), SumGeq([__2, y], __0), SumLeq([__3, y], __0), SumGeq([__4, y], __1), SumLeq([__5, y], __1), SumGeq([__6, 20], __2), SumLeq([__7, 20], __2), SumGeq([__8, 20], __3), SumLeq([__9, 20], __3), SumGeq([__10, 20], __4), SumLeq([__11, 20], __4), SumGeq([__12, 20], __5), SumLeq([__13, 20], __5), SumGeq([x, 10], __6), SumLeq([x, 10], __6), SumGeq([x, 10], __7), SumLeq([x, 10], __7), SumGeq([x, 10], __8), SumLeq([x, 10], __8), SumGeq([x, 10], __9), SumLeq([x, 10], __9), SumGeq([x, 10], __10), SumLeq([x, 10], __10), SumGeq([x, 10], __11), SumLeq([x, 10], __11), SumGeq([x, 10], __12), SumLeq([x, 10], __12), SumGeq([x, 10], __13), SumLeq([x, 10], __13)])","target":"rule_engine"}
{"count":59,"message":" Number of rules applied"}
