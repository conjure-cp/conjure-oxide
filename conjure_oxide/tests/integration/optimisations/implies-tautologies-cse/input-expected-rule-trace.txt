
Model before rewriting:

find a: bool
find b: bool
find c: bool
find d: bool
find e: bool
find l: int(1..10)
find m: int(1..10)
find n: int(1..10)
find o: int(1..10)
find p: int(1..10)
find q: int(1..10)
find r: int(1..10)
find x: bool
find y: bool
find z: bool

such that

(x) -> (x),
or([(a) -> (z),(z) -> (a);int(1..2)]),
or([(b) -> (c),(b) -> (Not(c));int(1..2)]),
((l = 10)) -> ((l = 10)),
or([((n < 6)) -> ((m % 2 = 0)),((m % 2 = 0)) -> ((n < 6));int(1..2)]),
or([or([or([((n < 6)) -> ((m % 2 = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> ((n < 6));int(1..2)]),
(o = n),
(d = (n < 6)),
(p = m % 2),
or([((o < 6)) -> ((p = 0)),((m % 2 = 0)) -> (d);int(1..2)]),
or([or([or([((o < 6)) -> ((p = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> (d);int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)]),
or([or([or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),a;int(1..2)]),b;int(1..2)]),((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)])

--

Successful Tranformation: 
(x) -> (x), 
~~> partial_evaluator [9000; Base]
true


--

Successful Tranformation: 
true,
or([(a) -> (z),(z) -> (a);int(1..2)]),
or([(b) -> (c),(b) -> (Not(c));int(1..2)]),
((l = 10)) -> ((l = 10)),
or([((n < 6)) -> ((m % 2 = 0)),((m % 2 = 0)) -> ((n < 6));int(1..2)]),
or([or([or([((n < 6)) -> ((m % 2 = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> ((n < 6));int(1..2)]),
(o = n),
(d = (n < 6)),
(p = m % 2),
or([((o < 6)) -> ((p = 0)),((m % 2 = 0)) -> (d);int(1..2)]),
or([or([or([((o < 6)) -> ((p = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> (d);int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)]),
or([or([or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),a;int(1..2)]),b;int(1..2)]),((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)]), 
~~> partial_evaluator [9000; Base]
or([(a) -> (z),(z) -> (a);int(1..2)]),
or([(b) -> (c),(b) -> (Not(c));int(1..2)]),
((l = 10)) -> ((l = 10)),
or([((n < 6)) -> ((m % 2 = 0)),((m % 2 = 0)) -> ((n < 6));int(1..2)]),
or([or([or([((n < 6)) -> ((m % 2 = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> ((n < 6));int(1..2)]),
(o = n),
(d = (n < 6)),
(p = m % 2),
or([((o < 6)) -> ((p = 0)),((m % 2 = 0)) -> (d);int(1..2)]),
or([or([or([((o < 6)) -> ((p = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> (d);int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)]),
or([or([or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),a;int(1..2)]),b;int(1..2)]),((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)])


--

Successful Tranformation: 
or([or([or([((n < 6)) -> ((m % 2 = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> ((n < 6));int(1..2)]), 
~~> normalise_associative_commutative [8900; Base]
or([((n < 6)) -> ((m % 2 = 0)),a,b,((m % 2 = 0)) -> ((n < 6));int(1..2)])


--

Successful Tranformation: 
or([or([or([((o < 6)) -> ((p = 0)),a;int(1..2)]),b;int(1..2)]),((m % 2 = 0)) -> (d);int(1..2)]), 
~~> normalise_associative_commutative [8900; Base]
or([((o < 6)) -> ((p = 0)),a,b,((m % 2 = 0)) -> (d);int(1..2)])


--

Successful Tranformation: 
or([or([or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),a;int(1..2)]),b;int(1..2)]),((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)]), 
~~> normalise_associative_commutative [8900; Base]
or([((UnsafeDiv(q, 2) = r)) -> ((n < 6)),a,b,((UnsafeDiv(q, 2) = r)) -> (Not((n < 6)));int(1..2)])


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(o < 6), 
~~> lt_to_leq [8400; Minion]
(o <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(o < 6), 
~~> lt_to_leq [8400; Minion]
(o <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
(n < 6), 
~~> lt_to_leq [8400; Minion]
(n <= Sum([6,-1;int(1..)]))


--

Successful Tranformation: 
Sum([6,-1;int(1..)]), 
~~> constant_evaluator [9001; Constant]
5


--

Successful Tranformation: 
m % 2, 
~~> mod_to_bubble [6000; Bubble]
{SafeMod(m,2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeMod(m,2) @ true} = 0), 
~~> bubble_up [8900; Bubble]
{(SafeMod(m,2) = 0) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeMod(m,2) = 0) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeMod(m,2) = 0),true;int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeMod(m,2) = 0);int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeMod(m,2) = 0)


--

Successful Tranformation: 
m % 2, 
~~> mod_to_bubble [6000; Bubble]
{SafeMod(m,2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeMod(m,2) @ true} = 0), 
~~> bubble_up [8900; Bubble]
{(SafeMod(m,2) = 0) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeMod(m,2) = 0) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeMod(m,2) = 0),true;int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeMod(m,2) = 0);int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeMod(m,2) = 0)


--

Successful Tranformation: 
m % 2, 
~~> mod_to_bubble [6000; Bubble]
{SafeMod(m,2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeMod(m,2) @ true} = 0), 
~~> bubble_up [8900; Bubble]
{(SafeMod(m,2) = 0) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeMod(m,2) = 0) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeMod(m,2) = 0),true;int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeMod(m,2) = 0);int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeMod(m,2) = 0)


--

Successful Tranformation: 
m % 2, 
~~> mod_to_bubble [6000; Bubble]
{SafeMod(m,2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeMod(m,2) @ true} = 0), 
~~> bubble_up [8900; Bubble]
{(SafeMod(m,2) = 0) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeMod(m,2) = 0) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeMod(m,2) = 0),true;int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeMod(m,2) = 0);int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeMod(m,2) = 0)


--

Successful Tranformation: 
m % 2, 
~~> mod_to_bubble [6000; Bubble]
{SafeMod(m,2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
(p = {SafeMod(m,2) @ true}), 
~~> bubble_up [8900; Bubble]
{(p = SafeMod(m,2)) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(p = SafeMod(m,2)) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(p = SafeMod(m,2)),true;int(1..)])


--

Successful Tranformation: 
or([(a) -> (z),(z) -> (a);int(1..2)]),
or([(b) -> (c),(b) -> (Not(c));int(1..2)]),
((l = 10)) -> ((l = 10)),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),a,b,((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
(o = n),
(d = (n <= 5)),
and([(p = SafeMod(m,2)),true;int(1..)]),
or([((o <= 5)) -> ((p = 0)),((m % 2 = 0)) -> (d);int(1..2)]),
or([((o <= 5)) -> ((p = 0)),a,b,((m % 2 = 0)) -> (d);int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),a,b,((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)]), 
~~> partial_evaluator [9000; Base]
or([(a) -> (z),(z) -> (a);int(1..2)]),
or([(b) -> (c),(b) -> (Not(c));int(1..2)]),
((l = 10)) -> ((l = 10)),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),a,b,((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
(o = n),
(d = (n <= 5)),
(p = SafeMod(m,2)),
true,
or([((o <= 5)) -> ((p = 0)),((m % 2 = 0)) -> (d);int(1..2)]),
or([((o <= 5)) -> ((p = 0)),a,b,((m % 2 = 0)) -> (d);int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),a,b,((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)])


--

Successful Tranformation: 
or([(a) -> (z),(z) -> (a);int(1..2)]),
or([(b) -> (c),(b) -> (Not(c));int(1..2)]),
((l = 10)) -> ((l = 10)),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),a,b,((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
(o = n),
(d = (n <= 5)),
(p = SafeMod(m,2)),
true,
or([((o <= 5)) -> ((p = 0)),((m % 2 = 0)) -> (d);int(1..2)]),
or([((o <= 5)) -> ((p = 0)),a,b,((m % 2 = 0)) -> (d);int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),a,b,((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)]), 
~~> partial_evaluator [9000; Base]
or([(a) -> (z),(z) -> (a);int(1..2)]),
or([(b) -> (c),(b) -> (Not(c));int(1..2)]),
((l = 10)) -> ((l = 10)),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
or([((n <= 5)) -> ((SafeMod(m,2) = 0)),a,b,((SafeMod(m,2) = 0)) -> ((n <= 5));int(1..2)]),
(o = n),
(d = (n <= 5)),
(p = SafeMod(m,2)),
or([((o <= 5)) -> ((p = 0)),((m % 2 = 0)) -> (d);int(1..2)]),
or([((o <= 5)) -> ((p = 0)),a,b,((m % 2 = 0)) -> (d);int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)]),
or([((UnsafeDiv(q, 2) = r)) -> ((n <= 5)),a,b,((UnsafeDiv(q, 2) = r)) -> (Not((n <= 5)));int(1..2)])


--

Successful Tranformation: 
m % 2, 
~~> mod_to_bubble [6000; Bubble]
{SafeMod(m,2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeMod(m,2) @ true} = 0), 
~~> bubble_up [8900; Bubble]
{(SafeMod(m,2) = 0) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeMod(m,2) = 0) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeMod(m,2) = 0),true;int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeMod(m,2) = 0);int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeMod(m,2) = 0)


--

Successful Tranformation: 
m % 2, 
~~> mod_to_bubble [6000; Bubble]
{SafeMod(m,2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeMod(m,2) @ true} = 0), 
~~> bubble_up [8900; Bubble]
{(SafeMod(m,2) = 0) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeMod(m,2) = 0) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeMod(m,2) = 0),true;int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeMod(m,2) = 0);int(1..)])


--

Successful Tranformation: 
and([(SafeMod(m,2) = 0);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeMod(m,2) = 0)


--

Successful Tranformation: 
UnsafeDiv(q, 2), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(q, 2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeDiv(q, 2) @ true} = r), 
~~> bubble_up [8900; Bubble]
{(SafeDiv(q, 2) = r) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeDiv(q, 2) = r) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeDiv(q, 2) = r),true;int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeDiv(q, 2) = r);int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeDiv(q, 2) = r)


--

Successful Tranformation: 
UnsafeDiv(q, 2), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(q, 2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeDiv(q, 2) @ true} = r), 
~~> bubble_up [8900; Bubble]
{(SafeDiv(q, 2) = r) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeDiv(q, 2) = r) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeDiv(q, 2) = r),true;int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeDiv(q, 2) = r);int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeDiv(q, 2) = r)


--

Successful Tranformation: 
UnsafeDiv(q, 2), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(q, 2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeDiv(q, 2) @ true} = r), 
~~> bubble_up [8900; Bubble]
{(SafeDiv(q, 2) = r) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeDiv(q, 2) = r) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeDiv(q, 2) = r),true;int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeDiv(q, 2) = r);int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeDiv(q, 2) = r)


--

Successful Tranformation: 
UnsafeDiv(q, 2), 
~~> div_to_bubble [6000; Bubble]
{SafeDiv(q, 2) @ (2 != 0)}


--

Successful Tranformation: 
(2 != 0), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
({SafeDiv(q, 2) @ true} = r), 
~~> bubble_up [8900; Bubble]
{(SafeDiv(q, 2) = r) @ and([true;int(1..)])}


--

Successful Tranformation: 
and([true;int(1..)]), 
~~> constant_evaluator [9001; Constant]
true


--

Successful Tranformation: 
{(SafeDiv(q, 2) = r) @ true}, 
~~> expand_bubble [8900; Bubble]
and([(SafeDiv(q, 2) = r),true;int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r),true;int(1..)]), 
~~> partial_evaluator [9000; Base]
and([(SafeDiv(q, 2) = r);int(1..)])


--

Successful Tranformation: 
and([(SafeDiv(q, 2) = r);int(1..)]), 
~~> remove_unit_vector_and [8800; Base]
(SafeDiv(q, 2) = r)


--

Successful Tranformation: 
(a) -> (z), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
Ineq(a, z, 0)


--

Successful Tranformation: 
(z) -> (a), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
Ineq(z, a, 0)


--

Successful Tranformation: 
(b) -> (c), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
Ineq(b, c, 0)


--

Successful Tranformation: 
(b) -> (Not(c)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply(Not(c), b)


--

Successful Tranformation: 
(d = (n <= 5)), 
~~> bool_eq_to_reify [4400; Minion]
Reify((n <= 5), d)


--

Successful Tranformation: 
((l = 10)) -> ((l = 10)), 
~~> flatten_imply [4200; Minion]
(__0) -> ((l = 10))
new variables:
  find __0: bool
new constraints:
  __0 =aux (l = 10)

--

Successful Tranformation: 
(__0) -> ((l = 10)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((l = 10), __0)


--

Successful Tranformation: 
__0 =aux (l = 10), 
~~> bool_eq_to_reify [4400; Minion]
Reify((l = 10), __0)


--

Successful Tranformation: 
((n <= 5)) -> ((SafeMod(m,2) = 0)), 
~~> flatten_imply [4200; Minion]
(__1) -> ((SafeMod(m,2) = 0))
new variables:
  find __1: bool
new constraints:
  __1 =aux (n <= 5)

--

Successful Tranformation: 
(__1) -> ((SafeMod(m,2) = 0)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((SafeMod(m,2) = 0), __1)


--

Successful Tranformation: 
__1 =aux (n <= 5), 
~~> bool_eq_to_reify [4400; Minion]
Reify((n <= 5), __1)


--

Successful Tranformation: 
(SafeMod(m,2) = 0), 
~~> introduce_modeq [4200; Minion]
ModEq(m, 2, 0)


--

Successful Tranformation: 
((SafeMod(m,2) = 0)) -> ((n <= 5)), 
~~> flatten_imply [4200; Minion]
(__2) -> ((n <= 5))
new variables:
  find __2: bool
new constraints:
  __2 =aux (SafeMod(m,2) = 0)

--

Successful Tranformation: 
(__2) -> ((n <= 5)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((n <= 5), __2)


--

Successful Tranformation: 
__2 =aux (SafeMod(m,2) = 0), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeMod(m,2) = 0), __2)


--

Successful Tranformation: 
((n <= 5)) -> ((SafeMod(m,2) = 0)), 
~~> flatten_imply [4200; Minion]
(__3) -> ((SafeMod(m,2) = 0))
new variables:
  find __3: bool
new constraints:
  __3 =aux (n <= 5)

--

Successful Tranformation: 
(__3) -> ((SafeMod(m,2) = 0)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((SafeMod(m,2) = 0), __3)


--

Successful Tranformation: 
__3 =aux (n <= 5), 
~~> bool_eq_to_reify [4400; Minion]
Reify((n <= 5), __3)


--

Successful Tranformation: 
(SafeMod(m,2) = 0), 
~~> introduce_modeq [4200; Minion]
ModEq(m, 2, 0)


--

Successful Tranformation: 
((SafeMod(m,2) = 0)) -> ((n <= 5)), 
~~> flatten_imply [4200; Minion]
(__4) -> ((n <= 5))
new variables:
  find __4: bool
new constraints:
  __4 =aux (SafeMod(m,2) = 0)

--

Successful Tranformation: 
(__4) -> ((n <= 5)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((n <= 5), __4)


--

Successful Tranformation: 
__4 =aux (SafeMod(m,2) = 0), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeMod(m,2) = 0), __4)


--

Successful Tranformation: 
(p = SafeMod(m,2)), 
~~> introduce_modeq [4200; Minion]
ModEq(m, 2, p)


--

Successful Tranformation: 
((o <= 5)) -> ((p = 0)), 
~~> flatten_imply [4200; Minion]
(__5) -> ((p = 0))
new variables:
  find __5: bool
new constraints:
  __5 =aux (o <= 5)

--

Successful Tranformation: 
(__5) -> ((p = 0)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((p = 0), __5)


--

Successful Tranformation: 
__5 =aux (o <= 5), 
~~> bool_eq_to_reify [4400; Minion]
Reify((o <= 5), __5)


--

Successful Tranformation: 
((SafeMod(m,2) = 0)) -> (d), 
~~> flatten_imply [4200; Minion]
(__6) -> (d)
new variables:
  find __6: bool
new constraints:
  __6 =aux (SafeMod(m,2) = 0)

--

Successful Tranformation: 
(__6) -> (d), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
Ineq(__6, d, 0)


--

Successful Tranformation: 
__6 =aux (SafeMod(m,2) = 0), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeMod(m,2) = 0), __6)


--

Successful Tranformation: 
((o <= 5)) -> ((p = 0)), 
~~> flatten_imply [4200; Minion]
(__7) -> ((p = 0))
new variables:
  find __7: bool
new constraints:
  __7 =aux (o <= 5)

--

Successful Tranformation: 
(__7) -> ((p = 0)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((p = 0), __7)


--

Successful Tranformation: 
__7 =aux (o <= 5), 
~~> bool_eq_to_reify [4400; Minion]
Reify((o <= 5), __7)


--

Successful Tranformation: 
((SafeMod(m,2) = 0)) -> (d), 
~~> flatten_imply [4200; Minion]
(__8) -> (d)
new variables:
  find __8: bool
new constraints:
  __8 =aux (SafeMod(m,2) = 0)

--

Successful Tranformation: 
(__8) -> (d), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
Ineq(__8, d, 0)


--

Successful Tranformation: 
__8 =aux (SafeMod(m,2) = 0), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeMod(m,2) = 0), __8)


--

Successful Tranformation: 
((SafeDiv(q, 2) = r)) -> ((n <= 5)), 
~~> flatten_imply [4200; Minion]
(__9) -> ((n <= 5))
new variables:
  find __9: bool
new constraints:
  __9 =aux (SafeDiv(q, 2) = r)

--

Successful Tranformation: 
(__9) -> ((n <= 5)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((n <= 5), __9)


--

Successful Tranformation: 
__9 =aux (SafeDiv(q, 2) = r), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeDiv(q, 2) = r), __9)


--

Successful Tranformation: 
((SafeDiv(q, 2) = r)) -> (Not((n <= 5))), 
~~> flatten_imply [4200; Minion]
(__10) -> (Not((n <= 5)))
new variables:
  find __10: bool
new constraints:
  __10 =aux (SafeDiv(q, 2) = r)

--

Successful Tranformation: 
(__10) -> (Not((n <= 5))), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply(Not((n <= 5)), __10)


--

Successful Tranformation: 
__10 =aux (SafeDiv(q, 2) = r), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeDiv(q, 2) = r), __10)


--

Successful Tranformation: 
Not((n <= 5)), 
~~> flatten_generic [4200; Minion]
Not(__11)
new variables:
  find __11: bool
new constraints:
  __11 =aux (n <= 5)

--

Successful Tranformation: 
__11 =aux (n <= 5), 
~~> bool_eq_to_reify [4400; Minion]
Reify((n <= 5), __11)


--

Successful Tranformation: 
((SafeDiv(q, 2) = r)) -> ((n <= 5)), 
~~> flatten_imply [4200; Minion]
(__12) -> ((n <= 5))
new variables:
  find __12: bool
new constraints:
  __12 =aux (SafeDiv(q, 2) = r)

--

Successful Tranformation: 
(__12) -> ((n <= 5)), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply((n <= 5), __12)


--

Successful Tranformation: 
__12 =aux (SafeDiv(q, 2) = r), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeDiv(q, 2) = r), __12)


--

Successful Tranformation: 
((SafeDiv(q, 2) = r)) -> (Not((n <= 5))), 
~~> flatten_imply [4200; Minion]
(__13) -> (Not((n <= 5)))
new variables:
  find __13: bool
new constraints:
  __13 =aux (SafeDiv(q, 2) = r)

--

Successful Tranformation: 
(__13) -> (Not((n <= 5))), 
~~> introduce_reifyimply_ineq_from_imply [4400; Minion]
ReifyImply(Not((n <= 5)), __13)


--

Successful Tranformation: 
__13 =aux (SafeDiv(q, 2) = r), 
~~> bool_eq_to_reify [4400; Minion]
Reify((SafeDiv(q, 2) = r), __13)


--

Successful Tranformation: 
Not((n <= 5)), 
~~> flatten_generic [4200; Minion]
Not(__14)
new variables:
  find __14: bool
new constraints:
  __14 =aux (n <= 5)

--

Successful Tranformation: 
__14 =aux (n <= 5), 
~~> bool_eq_to_reify [4400; Minion]
Reify((n <= 5), __14)


--

Successful Tranformation: 
(SafeMod(m,2) = 0), 
~~> introduce_modeq [4200; Minion]
ModEq(m, 2, 0)


--

Successful Tranformation: 
(SafeMod(m,2) = 0), 
~~> introduce_modeq [4200; Minion]
ModEq(m, 2, 0)


--

Successful Tranformation: 
(SafeMod(m,2) = 0), 
~~> introduce_modeq [4200; Minion]
ModEq(m, 2, 0)


--

Successful Tranformation: 
(SafeMod(m,2) = 0), 
~~> introduce_modeq [4200; Minion]
ModEq(m, 2, 0)


--

Successful Tranformation: 
(SafeDiv(q, 2) = r), 
~~> introduce_diveq [4200; Minion]
DivEq(q, 2, r)


--

Successful Tranformation: 
(SafeDiv(q, 2) = r), 
~~> introduce_diveq [4200; Minion]
DivEq(q, 2, r)


--

Successful Tranformation: 
(SafeDiv(q, 2) = r), 
~~> introduce_diveq [4200; Minion]
DivEq(q, 2, r)


--

Successful Tranformation: 
(SafeDiv(q, 2) = r), 
~~> introduce_diveq [4200; Minion]
DivEq(q, 2, r)


--

Successful Tranformation: 
Not(c), 
~~> not_literal_to_wliteral [4100; Minion]
WatchedLiteral(c,false)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
Not(__11), 
~~> not_literal_to_wliteral [4100; Minion]
WatchedLiteral(__11,false)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
Not(__14), 
~~> not_literal_to_wliteral [4100; Minion]
WatchedLiteral(__14,false)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
(o <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(o, 5, 0)


--

Successful Tranformation: 
(o <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(o, 5, 0)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
(n <= 5), 
~~> leq_to_ineq [4100; Minion]
Ineq(n, 5, 0)


--

Successful Tranformation: 
or([Ineq(a, z, 0),Ineq(z, a, 0);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([Ineq(a, z, 0),Ineq(z, a, 0);int(1..)])


--

Successful Tranformation: 
or([Ineq(b, c, 0),ReifyImply(WatchedLiteral(c,false), b);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([Ineq(b, c, 0),ReifyImply(WatchedLiteral(c,false), b);int(1..)])


--

Successful Tranformation: 
or([ReifyImply(ModEq(m, 2, 0), __1),ReifyImply(Ineq(n, 5, 0), __2);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([ReifyImply(ModEq(m, 2, 0), __1),ReifyImply(Ineq(n, 5, 0), __2);int(1..)])


--

Successful Tranformation: 
or([ReifyImply(ModEq(m, 2, 0), __3),a,b,ReifyImply(Ineq(n, 5, 0), __4);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([ReifyImply(ModEq(m, 2, 0), __3),a,b,ReifyImply(Ineq(n, 5, 0), __4);int(1..)])


--

Successful Tranformation: 
or([ReifyImply((p = 0), __5),Ineq(__6, d, 0);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([ReifyImply((p = 0), __5),Ineq(__6, d, 0);int(1..)])


--

Successful Tranformation: 
or([ReifyImply((p = 0), __7),a,b,Ineq(__8, d, 0);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([ReifyImply((p = 0), __7),a,b,Ineq(__8, d, 0);int(1..)])


--

Successful Tranformation: 
or([ReifyImply(Ineq(n, 5, 0), __9),ReifyImply(WatchedLiteral(__11,false), __10);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([ReifyImply(Ineq(n, 5, 0), __9),ReifyImply(WatchedLiteral(__11,false), __10);int(1..)])


--

Successful Tranformation: 
or([ReifyImply(Ineq(n, 5, 0), __12),a,b,ReifyImply(WatchedLiteral(__14,false), __13);int(1..2)]), 
~~> matrix_to_list [2000; Base]
or([ReifyImply(Ineq(n, 5, 0), __12),a,b,ReifyImply(WatchedLiteral(__14,false), __13);int(1..)])


--


Final model:

find a: bool
find b: bool
find c: bool
find d: bool
find e: bool
find l: int(1..10)
find m: int(1..10)
find n: int(1..10)
find o: int(1..10)
find p: int(1..10)
find q: int(1..10)
find r: int(1..10)
find x: bool
find y: bool
find z: bool
find __0: bool
find __1: bool
find __2: bool
find __3: bool
find __4: bool
find __5: bool
find __6: bool
find __7: bool
find __8: bool
find __9: bool
find __10: bool
find __11: bool
find __12: bool
find __13: bool
find __14: bool

such that

or([Ineq(a, z, 0),Ineq(z, a, 0);int(1..)]),
or([Ineq(b, c, 0),ReifyImply(WatchedLiteral(c,false), b);int(1..)]),
ReifyImply((l = 10), __0),
or([ReifyImply(ModEq(m, 2, 0), __1),ReifyImply(Ineq(n, 5, 0), __2);int(1..)]),
or([ReifyImply(ModEq(m, 2, 0), __3),a,b,ReifyImply(Ineq(n, 5, 0), __4);int(1..)]),
(o = n),
Reify(Ineq(n, 5, 0), d),
ModEq(m, 2, p),
or([ReifyImply((p = 0), __5),Ineq(__6, d, 0);int(1..)]),
or([ReifyImply((p = 0), __7),a,b,Ineq(__8, d, 0);int(1..)]),
or([ReifyImply(Ineq(n, 5, 0), __9),ReifyImply(WatchedLiteral(__11,false), __10);int(1..)]),
or([ReifyImply(Ineq(n, 5, 0), __12),a,b,ReifyImply(WatchedLiteral(__14,false), __13);int(1..)]),
Reify((l = 10), __0),
Reify(Ineq(n, 5, 0), __1),
Reify(ModEq(m, 2, 0), __2),
Reify(Ineq(n, 5, 0), __3),
Reify(ModEq(m, 2, 0), __4),
Reify(Ineq(o, 5, 0), __5),
Reify(ModEq(m, 2, 0), __6),
Reify(Ineq(o, 5, 0), __7),
Reify(ModEq(m, 2, 0), __8),
Reify(DivEq(q, 2, r), __9),
Reify(DivEq(q, 2, r), __10),
Reify(Ineq(n, 5, 0), __11),
Reify(DivEq(q, 2, r), __12),
Reify(DivEq(q, 2, r), __13),
Reify(Ineq(n, 5, 0), __14)

