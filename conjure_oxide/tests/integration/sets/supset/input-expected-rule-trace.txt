
Model before rewriting:

letting a be {1,2,3}
letting b be {2,3}

such that

(a supset b)

--

Successful Tranformation: 
a, 
~~> substitute_value_lettings [5000; Base]
{1,2,3}


--

Successful Tranformation: 
b, 
~~> substitute_value_lettings [5000; Base]
{2,3}


--

Successful Tranformation: 
({1,2,3} supset {2,3}), 
~~> supset_to_subset [8700; Base]
({2,3} subset {1,2,3})


--

Successful Tranformation: 
({2,3} subset {1,2,3}), 
~~> subset_to_subset_eq_neq [8700; Base]
and([({2,3} subsetEq {1,2,3}),({2,3} != {1,2,3});int(1..)])


--

Successful Tranformation: 
and([({2,3} subsetEq {1,2,3}),({2,3} != {1,2,3});int(1..)]), 
~~> partial_evaluator [9000; Base]
({2,3} subsetEq {1,2,3}),
({2,3} != {1,2,3})


--

Successful Tranformation: 
({2,3} != {1,2,3}), 
~~> neq_not_eq_sets [8700; Base]
Not(({1,2,3} = {2,3}))


--

Successful Tranformation: 
({1,2,3} = {2,3}), 
~~> eq_to_subset_eq [8800; Base]
and([({1,2,3} subsetEq {2,3}),({2,3} subsetEq {1,2,3});int(1..)])


--

Successful Tranformation: 
Not(and([({1,2,3} subsetEq {2,3}),({2,3} subsetEq {1,2,3});int(1..)])), 
~~> distribute_not_over_and [8400; Base]
or([Not(({1,2,3} subsetEq {2,3})),Not(({2,3} subsetEq {1,2,3}));int(1..)])


--

Successful Tranformation: 
Not(({1,2,3} subsetEq {2,3})), 
~~> flatten_generic [4200; Minion]
Not(__0)
new variables:
  find __0: bool
new constraints:
  __0 =aux ({1,2,3} subsetEq {2,3})

--

Successful Tranformation: 
__0 =aux ({1,2,3} subsetEq {2,3}), 
~~> bool_eq_to_reify [4400; Minion]
Reify(({1,2,3} subsetEq {2,3}), __0)


--

Successful Tranformation: 
Not(({2,3} subsetEq {1,2,3})), 
~~> flatten_generic [4200; Minion]
Not(__1)
new variables:
  find __1: bool
new constraints:
  __1 =aux ({2,3} subsetEq {1,2,3})

--

Successful Tranformation: 
__1 =aux ({2,3} subsetEq {1,2,3}), 
~~> bool_eq_to_reify [4400; Minion]
Reify(({2,3} subsetEq {1,2,3}), __1)


--

Successful Tranformation: 
Not(__0), 
~~> not_literal_to_wliteral [4100; Minion]
WatchedLiteral(__0,false)


--

Successful Tranformation: 
Not(__1), 
~~> not_literal_to_wliteral [4100; Minion]
WatchedLiteral(__1,false)


--


Final model:

letting a be {1,2,3}
letting b be {2,3}
find __0: bool
find __1: bool

such that

({2,3} subsetEq {1,2,3}),
or([WatchedLiteral(__0,false),WatchedLiteral(__1,false);int(1..)]),
Reify(({1,2,3} subsetEq {2,3}), __0),
Reify(({2,3} subsetEq {1,2,3}), __1)

