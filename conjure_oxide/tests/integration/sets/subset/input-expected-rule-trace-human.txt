Model before rewriting:

letting a be {1,2,3}
letting b be {2,3}

such that

(b subset a)

--

b, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
{2,3} 

--

a, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
{1,2,3} 

--

({2,3} subset {1,2,3}), 
   ~~> subset_to_subset_eq_neq ([("Base", 8700)]) 
and([({2,3} subsetEq {1,2,3}),({2,3} != {1,2,3});int(1..)]) 

--

and([({2,3} subsetEq {1,2,3}),({2,3} != {1,2,3});int(1..)]), 
   ~~> partial_evaluator ([("Base", 9000)]) 
({2,3} subsetEq {1,2,3}),
({2,3} != {1,2,3}) 

--

({2,3} != {1,2,3}), 
   ~~> neq_not_eq_sets ([("Base", 8700)]) 
Not(({1,2,3} = {2,3})) 

--

({1,2,3} = {2,3}), 
   ~~> eq_to_subset_eq ([("Base", 8800)]) 
and([({1,2,3} subsetEq {2,3}),({2,3} subsetEq {1,2,3});int(1..)]) 

--

Not(and([({1,2,3} subsetEq {2,3}),({2,3} subsetEq {1,2,3});int(1..)])), 
   ~~> distribute_not_over_and ([("Base", 8400)]) 
or([Not(({1,2,3} subsetEq {2,3})),Not(({2,3} subsetEq {1,2,3}));int(1..)]) 

--

Not(({1,2,3} subsetEq {2,3})), 
   ~~> flatten_generic ([("Minion", 4200)]) 
Not(__0) 
new variables:
  find __0: bool
new constraints:
  __0 =aux ({1,2,3} subsetEq {2,3})
--

__0 =aux ({1,2,3} subsetEq {2,3}), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(({1,2,3} subsetEq {2,3}), __0) 

--

Not(({2,3} subsetEq {1,2,3})), 
   ~~> flatten_generic ([("Minion", 4200)]) 
Not(__1) 
new variables:
  find __1: bool
new constraints:
  __1 =aux ({2,3} subsetEq {1,2,3})
--

__1 =aux ({2,3} subsetEq {1,2,3}), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(({2,3} subsetEq {1,2,3}), __1) 

--

Not(__0), 
   ~~> not_literal_to_wliteral ([("Minion", 4100)]) 
WatchedLiteral(__0,false) 

--

Not(__1), 
   ~~> not_literal_to_wliteral ([("Minion", 4100)]) 
WatchedLiteral(__1,false) 

--

Final model:

letting a be {1,2,3}
letting b be {2,3}
find __0: bool
find __1: bool

such that

({2,3} subsetEq {1,2,3}),
or([WatchedLiteral(__0,false),WatchedLiteral(__1,false);int(1..)]),
Reify(({1,2,3} subsetEq {2,3}), __0),
Reify(({2,3} subsetEq {1,2,3}), __1)

