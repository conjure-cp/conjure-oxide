Model before rewriting:

letting a be {2,3}
letting b be {1,2}
letting c be {1,2,3}

such that

(c = (a union b))

clauses:



--

(c = (a union b)), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(c = (a union b)) 

--

(c = (a union b)), 
   ~~> eq_to_subset_eq ([("Base", 8800)]) 
and([(c subsetEq (a union b)),((a union b) subsetEq c);int(1..)]) 

--

and([(c subsetEq (a union b)),((a union b) subsetEq c);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(c subsetEq (a union b)),
((a union b) subsetEq c) 

--

((a union b) subsetEq c), 
   ~~> union_subseteq ([("Base", 8700)]) 
and([(a subsetEq b),(a subsetEq c);int(1..)]) 

--

(c subsetEq (a union b)),
and([(a subsetEq b),(a subsetEq c);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(c subsetEq (a union b)),
(a subsetEq b),
(a subsetEq c) 

--

c, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2), Int(3)]) 

--

a, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(2), Int(3)]) 

--

b, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2)]) 

--

(Set([Int(1), Int(2), Int(3)]) subsetEq (Set([Int(2), Int(3)]) union Set([Int(1), Int(2)]))),
(a subsetEq b),
(a subsetEq c), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(a subsetEq b),
(a subsetEq c) 

--

a, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(2), Int(3)]) 

--

b, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2)]) 

--

(Set([Int(2), Int(3)]) subsetEq Set([Int(1), Int(2)])),
(a subsetEq c), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
false 

--

Final model:

letting a be Set([Int(2), Int(3)])
letting b be Set([Int(1), Int(2)])
letting c be Set([Int(1), Int(2), Int(3)])

such that

false

clauses:



