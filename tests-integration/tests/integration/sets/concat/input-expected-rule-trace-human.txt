Model before rewriting:

letting a be {1,2,3}
letting b be {2,3}
letting c be {2}

such that

(c subset (b intersect a))

clauses:



--

(c subset (b intersect a)), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(c subset (b intersect a)) 

--

(c subset (b intersect a)), 
   ~~> subset_to_subset_eq_neq ([("Base", 8700)]) 
and([(c subsetEq (b intersect a)),(c != (b intersect a));int(1..)]) 

--

and([(c subsetEq (b intersect a)),(c != (b intersect a));int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(c subsetEq (b intersect a)),
(c != (b intersect a)) 

--

(c subsetEq (b intersect a)), 
   ~~> subseteq_intersect ([("Base", 8700)]) 
and([(c subsetEq b),(c subsetEq a);int(1..)]) 

--

and([(c subsetEq b),(c subsetEq a);int(1..)]),
(c != (b intersect a)), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(c subsetEq b),
(c subsetEq a),
(c != (b intersect a)) 

--

(c != (b intersect a)), 
   ~~> neq_not_eq_sets ([("Base", 8700)]) 
!(((b intersect a) = c)) 

--

((b intersect a) = c), 
   ~~> eq_to_subset_eq ([("Base", 8800)]) 
and([((b intersect a) subsetEq c),(c subsetEq (b intersect a));int(1..)]) 

--

(c subsetEq (b intersect a)), 
   ~~> subseteq_intersect ([("Base", 8700)]) 
and([(c subsetEq b),(c subsetEq a);int(1..)]) 

--

and([((b intersect a) subsetEq c),and([(c subsetEq b),(c subsetEq a);int(1..)]);int(1..)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
and([((b intersect a) subsetEq c),(c subsetEq b),(c subsetEq a);int(1..)]) 

--

!(and([((b intersect a) subsetEq c),(c subsetEq b),(c subsetEq a);int(1..)])), 
   ~~> distribute_not_over_and ([("Base", 8400)]) 
or([!(((b intersect a) subsetEq c)),!((c subsetEq b)),!((c subsetEq a));int(1..)]) 

--

c, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(2)]) 

--

b, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(2), Int(3)]) 

--

(Set([Int(2)]) subsetEq Set([Int(2), Int(3)])),
(c subsetEq a),
or([!(((b intersect a) subsetEq c)),!((c subsetEq b)),!((c subsetEq a));int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(c subsetEq a),
or([!(((b intersect a) subsetEq c)),!((c subsetEq b)),!((c subsetEq a));int(1..)]) 

--

c, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(2)]) 

--

a, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2), Int(3)]) 

--

(Set([Int(2)]) subsetEq Set([Int(1), Int(2), Int(3)])),
or([!(((b intersect a) subsetEq c)),!((c subsetEq b)),!((c subsetEq a));int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
or([!(((b intersect a) subsetEq c)),!((c subsetEq b)),!((c subsetEq a));int(1..)]) 

--

b, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(2), Int(3)]) 

--

a, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2), Int(3)]) 

--

or([!(((Set([Int(2), Int(3)]) intersect Set([Int(1), Int(2), Int(3)])) subsetEq c)),!((c subsetEq b)),!((c subsetEq a));int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
or([!((Set([Int(2), Int(3)]) subsetEq c)),!((c subsetEq b)),!((c subsetEq a));int(1..)]) 

--

c, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(2)]) 

--

or([!((Set([Int(2), Int(3)]) subsetEq Set([Int(2)]))),!((c subsetEq b)),!((c subsetEq a));int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
true 

--

Final model:

letting a be Set([Int(1), Int(2), Int(3)])
letting b be Set([Int(2), Int(3)])
letting c be Set([Int(2)])

such that

true

clauses:



