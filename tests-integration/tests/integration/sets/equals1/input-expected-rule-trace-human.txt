Model before rewriting:

letting a be {1,2,3}
letting b be {1,2,3}

such that

(a = b)

clauses:



--

(a = b), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(a = b) 

--

(a = b), 
   ~~> eq_to_subset_eq ([("Base", 8800)]) 
and([(a subsetEq b),(b subsetEq a);int(1..)]) 

--

and([(a subsetEq b),(b subsetEq a);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(a subsetEq b),
(b subsetEq a) 

--

a, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2), Int(3)]) 

--

b, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2), Int(3)]) 

--

(Set([Int(1), Int(2), Int(3)]) subsetEq Set([Int(1), Int(2), Int(3)])),
(b subsetEq a), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(b subsetEq a) 

--

b, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2), Int(3)]) 

--

a, 
   ~~> substitute_value_lettings ([("Base", 5000)]) 
Set([Int(1), Int(2), Int(3)]) 

--

(Set([Int(1), Int(2), Int(3)]) subsetEq Set([Int(1), Int(2), Int(3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
true 

--

Final model:

letting a be Set([Int(1), Int(2), Int(3)])
letting b be Set([Int(1), Int(2), Int(3)])

such that

true

clauses:



