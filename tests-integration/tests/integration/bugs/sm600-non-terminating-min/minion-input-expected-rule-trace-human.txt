Model before rewriting:

find a: int(1..7)
find b: int(1..7)

such that

(sum([min([a,b;int(1..2)]),6;int(1..2)]) <= 10)

--

(sum([min([a,b;int(1..2)]),6;int(1..2)]) <= 10), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__0 <= 10) 
new variables:
  find __0: int(7..13)
new constraints:
  __0 =aux sum([min([a,b;int(1..2)]),6;int(1..2)])
--

(__0 <= 10), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__0, 10, 0) 

--

sum([min([a,b;int(1..2)]),6;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
sum([min([a,b;int(1..2)]),6;int(1..)]) 

--

__0 =aux sum([min([a,b;int(1..2)]),6;int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([6, __1], __0),SumGeq([6, __1], __0);int(1..)]) 
new variables:
  find __1: int(1..7)
new constraints:
  __1 =aux min([a,b;int(1..2)])
--

Ineq(__0, 10, 0),
and([SumLeq([6, __1], __0),SumGeq([6, __1], __0);int(1..)]),
__1 =aux min([a,b;int(1..2)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
Ineq(__0, 10, 0),
SumLeq([6, __1], __0),
SumGeq([6, __1], __0),
__1 =aux min([a,b;int(1..2)]) 

--

min([a,b;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
min([a,b;int(1..)]) 

--

min([a,b;int(1..)]), 
   ~~> min_to_var ([("Base", 6000)]) 
__2 
new variables:
  find __2: int(1..7)
new constraints:
  (__2 <= a)
  (__2 <= b)
  or([(__2 = a),(__2 = b);int(1..)])
--

(__2 <= a), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__2, a, 0) 

--

(__2 <= b), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__2, b, 0) 

--

Final model:

find a: int(1..7)
find b: int(1..7)
find __0: int(7..13)
find __1: int(1..7)
find __2: int(1..7)

such that

Ineq(__0, 10, 0),
SumLeq([6, __1], __0),
SumGeq([6, __1], __0),
__1 =aux __2,
Ineq(__2, a, 0),
Ineq(__2, b, 0),
or([(__2 = a),(__2 = b);int(1..)])

