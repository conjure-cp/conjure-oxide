Model before rewriting:

find class: matrix indexed by [[int(1..10)]] of int(1..2)
letting n be 10

such that

and([given a: int(1..10)
given b: int(1..10)
given c: int(1..10)

such that

(and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)])) -> (or([(class[a] != class[b]),(class[b] != class[c]),(class[c] != class[a]);int(1..3)]))
 | a: int(1..10),b: int(1..10),c: int(1..10),])

--

and([given a: int(1..10)
given b: int(1..10)
given c: int(1..10)

such that

(and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)]))
 | a: int(1..10),b: int(1..10),c: int(1..10),]), 
   ~~> select_representation_matrix ([("Base", 8001)]) 
and([given a: int(1..10)
given b: int(1..10)
given c: int(1..10)

such that

(and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)]))
 | a: int(1..10),b: int(1..10),c: int(1..10),]) 
new variables:
  find class#matrix_to_atom_1: int(1..2)
  find class#matrix_to_atom_10: int(1..2)
  find class#matrix_to_atom_2: int(1..2)
  find class#matrix_to_atom_3: int(1..2)
  find class#matrix_to_atom_4: int(1..2)
  find class#matrix_to_atom_5: int(1..2)
  find class#matrix_to_atom_6: int(1..2)
  find class#matrix_to_atom_7: int(1..2)
  find class#matrix_to_atom_8: int(1..2)
  find class#matrix_to_atom_9: int(1..2)
--

Model before rewriting:

find a: int(1..10)
find b: int(1..10)
find c: int(1..10)
find __0: bool
find __1: bool
find __2: bool

such that

(true != (and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)])))

--

and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)]) 

--

UnsafePow(a, 2), 
   ~~> pow_to_bubble ([("Bubble", 6000)]) 
{SafePow(a, 2) @ and([or([(a != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])} 

--

(true != (and([(sum([{SafePow(a, 2) @ and([or([(a != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])},UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(true != (and([(sum([SafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))) 

--

UnsafePow(b, 2), 
   ~~> pow_to_bubble ([("Bubble", 6000)]) 
{SafePow(b, 2) @ and([or([(b != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])} 

--

(true != (and([(sum([SafePow(a, 2),{SafePow(b, 2) @ and([or([(b != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])};int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(true != (and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))) 

--

UnsafePow(c, 2), 
   ~~> pow_to_bubble ([("Bubble", 6000)]) 
{SafePow(c, 2) @ and([or([(c != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])} 

--

(true != (and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = {SafePow(c, 2) @ and([or([(c != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])}),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(true != (and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))) 

--

(true != (and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(true != __3) 
new variables:
  find __3: bool
new constraints:
  __3 =aux (and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)]))
--

__3 =aux (and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)])), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify((and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)])), __3) 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([__0,__1,__2;int(1..3)])), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__4) -> (or([__0,__1,__2;int(1..3)])) 
new variables:
  find __4: bool
new constraints:
  __4 =aux and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])
--

(__4) -> (or([__0,__1,__2;int(1..3)])), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
ReifyImply(or([__0,__1,__2;int(1..3)]), __4) 

--

__4 =aux and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)]), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)]), __4) 

--

(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)), 
   ~~> flatten_eq ([("Minion", 4200)]) 
(__5 = __6) 
new variables:
  find __5: int(2..200)
  find __6: int(1..100)
new constraints:
  __5 =aux sum([SafePow(a, 2),SafePow(b, 2);int(1..2)])
  __6 =aux SafePow(c, 2)
--

__6 =aux SafePow(c, 2), 
   ~~> introduce_poweq ([("Minion", 4200)]) 
MinionPow(c,2,__6) 

--

(a <= b), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(a, b, 0) 

--

(b <= c), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(b, c, 0) 

--

or([__0,__1,__2;int(1..3)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
or([__0,__1,__2;int(1..)]) 

--

and([(__5 = __6),Ineq(a, b, 0),Ineq(b, c, 0);int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
and([(__5 = __6),Ineq(a, b, 0),Ineq(b, c, 0);int(1..)]) 

--

sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
sum([SafePow(a, 2),SafePow(b, 2);int(1..)]) 

--

__5 =aux sum([SafePow(a, 2),SafePow(b, 2);int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([__7, __8], __5),SumGeq([__7, __8], __5);int(1..)]) 
new variables:
  find __7: int(1..100)
  find __8: int(1..100)
new constraints:
  __7 =aux SafePow(a, 2)
  __8 =aux SafePow(b, 2)
--

(true != __3),
Reify(ReifyImply(or([__0,__1,__2;int(1..)]), __4), __3),
Reify(and([(__5 = __6),Ineq(a, b, 0),Ineq(b, c, 0);int(1..)]), __4),
and([SumLeq([__7, __8], __5),SumGeq([__7, __8], __5);int(1..)]),
MinionPow(c,2,__6),
__7 =aux SafePow(a, 2),
__8 =aux SafePow(b, 2), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(true != __3),
Reify(ReifyImply(or([__0,__1,__2;int(1..)]), __4), __3),
Reify(and([(__5 = __6),Ineq(a, b, 0),Ineq(b, c, 0);int(1..)]), __4),
SumLeq([__7, __8], __5),
SumGeq([__7, __8], __5),
MinionPow(c,2,__6),
__7 =aux SafePow(a, 2),
__8 =aux SafePow(b, 2) 

--

__7 =aux SafePow(a, 2), 
   ~~> introduce_poweq ([("Minion", 4200)]) 
MinionPow(a,2,__7) 

--

__8 =aux SafePow(b, 2), 
   ~~> introduce_poweq ([("Minion", 4200)]) 
MinionPow(b,2,__8) 

--

Final model:

find a: int(1..10)
find b: int(1..10)
find c: int(1..10)
find __0: bool
find __1: bool
find __2: bool
find __3: bool
find __4: bool
find __5: int(2..200)
find __6: int(1..100)
find __7: int(1..100)
find __8: int(1..100)

such that

(true != __3),
Reify(ReifyImply(or([__0,__1,__2;int(1..)]), __4), __3),
Reify(and([(__5 = __6),Ineq(a, b, 0),Ineq(b, c, 0);int(1..)]), __4),
SumLeq([__7, __8], __5),
SumGeq([__7, __8], __5),
MinionPow(c,2,__6),
MinionPow(a,2,__7),
MinionPow(b,2,__8)

Model before rewriting:

given a: int(1..10)
given b: int(1..10)
given c: int(1..10)

such that

(and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)]))

--

and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)]) 

--

UnsafePow(a, 2), 
   ~~> pow_to_bubble ([("Bubble", 6000)]) 
{SafePow(a, 2) @ and([or([(a != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])} 

--

(and([(sum([{SafePow(a, 2) @ and([or([(a != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])},UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

UnsafePow(b, 2), 
   ~~> pow_to_bubble ([("Bubble", 6000)]) 
{SafePow(b, 2) @ and([or([(b != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])} 

--

(and([(sum([SafePow(a, 2),{SafePow(b, 2) @ and([or([(b != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])};int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

UnsafePow(c, 2), 
   ~~> pow_to_bubble ([("Bubble", 6000)]) 
{SafePow(c, 2) @ and([or([(c != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])} 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = {SafePow(c, 2) @ and([or([(c != 0),(2 != 0);int(1..)]),(2 >= 0);int(1..)])}),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

class#matrix_to_atom[a], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{class#matrix_to_atom[a] @ and([__inDomain(a,int(1..10));int(1..)])} 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([({class#matrix_to_atom[a] @ and([__inDomain(a,int(1..10));int(1..)])} != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

class#matrix_to_atom[b], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{class#matrix_to_atom[b] @ and([__inDomain(b,int(1..10));int(1..)])} 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != {class#matrix_to_atom[b] @ and([__inDomain(b,int(1..10));int(1..)])}),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

class#matrix_to_atom[b], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{class#matrix_to_atom[b] @ and([__inDomain(b,int(1..10));int(1..)])} 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),({class#matrix_to_atom[b] @ and([__inDomain(b,int(1..10));int(1..)])} != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

class#matrix_to_atom[c], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{class#matrix_to_atom[c] @ and([__inDomain(c,int(1..10));int(1..)])} 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != {class#matrix_to_atom[c] @ and([__inDomain(c,int(1..10));int(1..)])}),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

class#matrix_to_atom[c], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{class#matrix_to_atom[c] @ and([__inDomain(c,int(1..10));int(1..)])} 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),({class#matrix_to_atom[c] @ and([__inDomain(c,int(1..10));int(1..)])} != class#matrix_to_atom[a]);int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

class#matrix_to_atom[a], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{class#matrix_to_atom[a] @ and([__inDomain(a,int(1..10));int(1..)])} 

--

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != {class#matrix_to_atom[a] @ and([__inDomain(a,int(1..10));int(1..)])});int(1..3)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),(a <= b),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)])) 

--

(a <= b), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(a, b, 0) 

--

(b <= c), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(b, c, 0) 

--

and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),Ineq(a, b, 0),Ineq(b, c, 0);int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]) = SafePow(c, 2)),Ineq(a, b, 0),Ineq(b, c, 0);int(1..)]) 

--

sum([SafePow(a, 2),SafePow(b, 2);int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
sum([SafePow(a, 2),SafePow(b, 2);int(1..)]) 

--

or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..)]) 

--

Final model:

given a: int(1..10)
given b: int(1..10)
given c: int(1..10)

such that

(and([(sum([SafePow(a, 2),SafePow(b, 2);int(1..)]) = SafePow(c, 2)),Ineq(a, b, 0),Ineq(b, c, 0);int(1..)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..)]))

and([given a: int(1..10)
given b: int(1..10)
given c: int(1..10)

such that

(and([and([(sum([UnsafePow(a, 2),UnsafePow(b, 2);int(1..2)]) = UnsafePow(c, 2)),(a <= b);int(1..2)]),(b <= c);int(1..2)])) -> (or([(class#matrix_to_atom[a] != class#matrix_to_atom[b]),(class#matrix_to_atom[b] != class#matrix_to_atom[c]),(class#matrix_to_atom[c] != class#matrix_to_atom[a]);int(1..3)]))
 | a: int(1..10),b: int(1..10),c: int(1..10),__0: bool,__1: bool,__2: bool,__3: bool,__4: bool,__5: int(2..200),__6: int(1..100),__7: int(1..100),__8: int(1..100),]), 
   ~~> expand_comprehension_ac ([("Better_AC_Comprehension_Expansion", 2001)]) 
and([(and([(sum([SafePow(3, 2),SafePow(4, 2);int(1..)]) = SafePow(5, 2)),Ineq(3, 4, 0),Ineq(4, 5, 0);int(1..)])) -> (or([(class#matrix_to_atom[3] != class#matrix_to_atom[4]),(class#matrix_to_atom[4] != class#matrix_to_atom[5]),(class#matrix_to_atom[5] != class#matrix_to_atom[3]);int(1..)])),(and([(sum([SafePow(6, 2),SafePow(8, 2);int(1..)]) = SafePow(10, 2)),Ineq(6, 8, 0),Ineq(8, 10, 0);int(1..)])) -> (or([(class#matrix_to_atom[6] != class#matrix_to_atom[8]),(class#matrix_to_atom[8] != class#matrix_to_atom[10]),(class#matrix_to_atom[10] != class#matrix_to_atom[6]);int(1..)]));int(1..)]) 

--

and([(and([(sum([SafePow(3, 2),SafePow(4, 2);int(1..)]) = SafePow(5, 2)),Ineq(3, 4, 0),Ineq(4, 5, 0);int(1..)])) -> (or([(class#matrix_to_atom[3] != class#matrix_to_atom[4]),(class#matrix_to_atom[4] != class#matrix_to_atom[5]),(class#matrix_to_atom[5] != class#matrix_to_atom[3]);int(1..)])),(and([(sum([SafePow(6, 2),SafePow(8, 2);int(1..)]) = SafePow(10, 2)),Ineq(6, 8, 0),Ineq(8, 10, 0);int(1..)])) -> (or([(class#matrix_to_atom[6] != class#matrix_to_atom[8]),(class#matrix_to_atom[8] != class#matrix_to_atom[10]),(class#matrix_to_atom[10] != class#matrix_to_atom[6]);int(1..)]));int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
or([(class#matrix_to_atom[3] != class#matrix_to_atom[4]),(class#matrix_to_atom[4] != class#matrix_to_atom[5]),(class#matrix_to_atom[5] != class#matrix_to_atom[3]);int(1..)]),
or([(class#matrix_to_atom[6] != class#matrix_to_atom[8]),(class#matrix_to_atom[8] != class#matrix_to_atom[10]),(class#matrix_to_atom[10] != class#matrix_to_atom[6]);int(1..)]) 

--

or([(class#matrix_to_atom[3] != class#matrix_to_atom[4]),(class#matrix_to_atom[4] != class#matrix_to_atom[5]),(class#matrix_to_atom[5] != class#matrix_to_atom[3]);int(1..)]),
or([(class#matrix_to_atom[6] != class#matrix_to_atom[8]),(class#matrix_to_atom[8] != class#matrix_to_atom[10]),(class#matrix_to_atom[10] != class#matrix_to_atom[6]);int(1..)]), 
   ~~> index_matrix_to_atom ([("Base", 5000)]) 
or([(class#matrix_to_atom_3 != class#matrix_to_atom_4),(class#matrix_to_atom_4 != class#matrix_to_atom_5),(class#matrix_to_atom_5 != class#matrix_to_atom_3);int(1..)]),
or([(class#matrix_to_atom_6 != class#matrix_to_atom_8),(class#matrix_to_atom_8 != class#matrix_to_atom_10),(class#matrix_to_atom_10 != class#matrix_to_atom_6);int(1..)]) 

--

Final model:

find class: matrix indexed by [[int(1..10)]] of int(1..2)
letting n be 10
find class#matrix_to_atom_1: int(1..2)
find class#matrix_to_atom_10: int(1..2)
find class#matrix_to_atom_2: int(1..2)
find class#matrix_to_atom_3: int(1..2)
find class#matrix_to_atom_4: int(1..2)
find class#matrix_to_atom_5: int(1..2)
find class#matrix_to_atom_6: int(1..2)
find class#matrix_to_atom_7: int(1..2)
find class#matrix_to_atom_8: int(1..2)
find class#matrix_to_atom_9: int(1..2)

such that

or([(class#matrix_to_atom_3 != class#matrix_to_atom_4),(class#matrix_to_atom_4 != class#matrix_to_atom_5),(class#matrix_to_atom_5 != class#matrix_to_atom_3);int(1..)]),
or([(class#matrix_to_atom_6 != class#matrix_to_atom_8),(class#matrix_to_atom_8 != class#matrix_to_atom_10),(class#matrix_to_atom_10 != class#matrix_to_atom_6);int(1..)])

