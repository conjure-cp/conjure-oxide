Model before rewriting:

find m: matrix indexed by [[int(1..5)]] of int(1..5)
find n: matrix indexed by [[int(1..5)]] of int(1..5)

such that

and([given i: int(1..5)

such that

(n[i] = (6 - i))

clauses:


 | i: int(1..5),]),
and([given i: int(1..5)

such that

((n[i] < 5)) -> ((m[i] = i))

clauses:


 | i: int(1..5),(i < 4)])

clauses:



--

and([given i: int(1..5)

such that

(n#matrix_to_atom[i] = (6 - i))

clauses:


 | i: int(1..5),]),
and([given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:


 | i: int(1..5),(i < 4)]), 
   ~~> select_representation_matrix ([("Base", 8001)]) 
and([given i: int(1..5)

such that

(n#matrix_to_atom[i] = (6 - i))

clauses:


 | i: int(1..5),]),
and([given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:


 | i: int(1..5),(i < 4)]) 
new variables:
  find m#matrix_to_atom_1: int(1..5)
  find m#matrix_to_atom_2: int(1..5)
  find m#matrix_to_atom_3: int(1..5)
  find m#matrix_to_atom_4: int(1..5)
  find m#matrix_to_atom_5: int(1..5)
  find n#matrix_to_atom_1: int(1..5)
  find n#matrix_to_atom_2: int(1..5)
  find n#matrix_to_atom_3: int(1..5)
  find n#matrix_to_atom_4: int(1..5)
  find n#matrix_to_atom_5: int(1..5)
--

Model before rewriting:

find i: int(1..5)
find __0: bool

such that

(true != __0)

clauses:



--

Final model:

find i: int(1..5)
find __0: bool

such that

(true != __0)

clauses:



Model before rewriting:

given i: int(1..5)

such that

(n#matrix_to_atom[i] = (6 - i))

clauses:



--

(6 - i), 
   ~~> minus_to_sum ([("Base", 8400)]) 
sum([6,-(i);int(1..)]) 

--

n#matrix_to_atom[i], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{n#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} 

--

({n#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} = sum([6,-(i);int(1..)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(n#matrix_to_atom[i] = sum([6,-(i);int(1..)])) 

--

Final model:

given i: int(1..5)

such that

(n#matrix_to_atom[i] = sum([6,-(i);int(1..)]))

clauses:



and([given i: int(1..5)

such that

(n#matrix_to_atom[i] = (6 - i))

clauses:


 | i: int(1..5),__0: bool,]), 
   ~~> expand_comprehension_ac ([("Better_AC_Comprehension_Expansion", 2001)]) 
and([(n#matrix_to_atom[1] = sum([6,-(1);int(1..)])),(n#matrix_to_atom[2] = sum([6,-(2);int(1..)])),(n#matrix_to_atom[3] = sum([6,-(3);int(1..)])),(n#matrix_to_atom[4] = sum([6,-(4);int(1..)])),(n#matrix_to_atom[5] = sum([6,-(5);int(1..)]));int(1..)]) 

--

and([(n#matrix_to_atom[1] = sum([6,-(1);int(1..)])),(n#matrix_to_atom[2] = sum([6,-(2);int(1..)])),(n#matrix_to_atom[3] = sum([6,-(3);int(1..)])),(n#matrix_to_atom[4] = sum([6,-(4);int(1..)])),(n#matrix_to_atom[5] = sum([6,-(5);int(1..)]));int(1..)]),
and([given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:


 | i: int(1..5),(i < 4)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(n#matrix_to_atom[1] = 5),
(n#matrix_to_atom[2] = 4),
(n#matrix_to_atom[3] = 3),
(n#matrix_to_atom[4] = 2),
(n#matrix_to_atom[5] = 1),
and([given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:


 | i: int(1..5),(i < 4)]) 

--

(n#matrix_to_atom[1] = 5),
(n#matrix_to_atom[2] = 4),
(n#matrix_to_atom[3] = 3),
(n#matrix_to_atom[4] = 2),
(n#matrix_to_atom[5] = 1),
and([given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:


 | i: int(1..5),(i < 4)]), 
   ~~> index_matrix_to_atom ([("Base", 5000)]) 
(n#matrix_to_atom_1 = 5),
(n#matrix_to_atom_2 = 4),
(n#matrix_to_atom_3 = 3),
(n#matrix_to_atom_4 = 2),
(n#matrix_to_atom_5 = 1),
and([given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:


 | i: int(1..5),(i < 4)]) 

--

Model before rewriting:

find i: int(1..5)
find __0: bool
find __1: bool

such that

(i < 4),
(true != (__0) -> (__1))

clauses:



--

(i < 4), 
   ~~> lt_to_leq ([("Minion", 8400)]) 
(i <= sum([4,-1;int(1..)])) 

--

(i <= sum([4,-1;int(1..)])),
(true != (__0) -> (__1)), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(i <= 3),
(true != (__0) -> (__1)) 

--

(__0) -> (__1), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
Ineq(__0, __1, 0) 

--

(true != Ineq(__0, __1, 0)), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(true != __2) 
new variables:
  find __2: bool
new constraints:
  __2 =aux Ineq(__0, __1, 0)
--

__2 =aux Ineq(__0, __1, 0), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(Ineq(__0, __1, 0), __2) 

--

(i <= 3), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(i, 3, 0) 

--

Final model:

find i: int(1..5)
find __0: bool
find __1: bool
find __2: bool

such that

Ineq(i, 3, 0),
(true != __2),
Reify(Ineq(__0, __1, 0), __2)

clauses:



Model before rewriting:

given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:



--

(n#matrix_to_atom[i] < 5), 
   ~~> lt_to_leq ([("Minion", 8400)]) 
(n#matrix_to_atom[i] <= sum([5,-1;int(1..)])) 

--

((n#matrix_to_atom[i] <= sum([5,-1;int(1..)]))) -> ((m#matrix_to_atom[i] = i)), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
((n#matrix_to_atom[i] <= 4)) -> ((m#matrix_to_atom[i] = i)) 

--

n#matrix_to_atom[i], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{n#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} 

--

(({n#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} <= 4)) -> ((m#matrix_to_atom[i] = i)), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
((n#matrix_to_atom[i] <= 4)) -> ((m#matrix_to_atom[i] = i)) 

--

m#matrix_to_atom[i], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{m#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} 

--

((n#matrix_to_atom[i] <= 4)) -> (({m#matrix_to_atom[i] @ and([__inDomain(i,int(1..5));int(1..)])} = i)), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
((n#matrix_to_atom[i] <= 4)) -> ((m#matrix_to_atom[i] = i)) 

--

Final model:

given i: int(1..5)

such that

((n#matrix_to_atom[i] <= 4)) -> ((m#matrix_to_atom[i] = i))

clauses:



and([given i: int(1..5)

such that

((n#matrix_to_atom[i] < 5)) -> ((m#matrix_to_atom[i] = i))

clauses:


 | i: int(1..5),__0: bool,__1: bool,__2: bool,(i < 4)]), 
   ~~> expand_comprehension_ac ([("Better_AC_Comprehension_Expansion", 2001)]) 
and([((n#matrix_to_atom[1] <= 4)) -> ((m#matrix_to_atom[1] = 1)),((n#matrix_to_atom[2] <= 4)) -> ((m#matrix_to_atom[2] = 2)),((n#matrix_to_atom[3] <= 4)) -> ((m#matrix_to_atom[3] = 3));int(1..)]) 

--

(n#matrix_to_atom_1 = 5),
(n#matrix_to_atom_2 = 4),
(n#matrix_to_atom_3 = 3),
(n#matrix_to_atom_4 = 2),
(n#matrix_to_atom_5 = 1),
and([((n#matrix_to_atom[1] <= 4)) -> ((m#matrix_to_atom[1] = 1)),((n#matrix_to_atom[2] <= 4)) -> ((m#matrix_to_atom[2] = 2)),((n#matrix_to_atom[3] <= 4)) -> ((m#matrix_to_atom[3] = 3));int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(n#matrix_to_atom_1 = 5),
(n#matrix_to_atom_2 = 4),
(n#matrix_to_atom_3 = 3),
(n#matrix_to_atom_4 = 2),
(n#matrix_to_atom_5 = 1),
((n#matrix_to_atom[1] <= 4)) -> ((m#matrix_to_atom[1] = 1)),
((n#matrix_to_atom[2] <= 4)) -> ((m#matrix_to_atom[2] = 2)),
((n#matrix_to_atom[3] <= 4)) -> ((m#matrix_to_atom[3] = 3)) 

--

(n#matrix_to_atom_1 = 5),
(n#matrix_to_atom_2 = 4),
(n#matrix_to_atom_3 = 3),
(n#matrix_to_atom_4 = 2),
(n#matrix_to_atom_5 = 1),
((n#matrix_to_atom[1] <= 4)) -> ((m#matrix_to_atom[1] = 1)),
((n#matrix_to_atom[2] <= 4)) -> ((m#matrix_to_atom[2] = 2)),
((n#matrix_to_atom[3] <= 4)) -> ((m#matrix_to_atom[3] = 3)), 
   ~~> index_matrix_to_atom ([("Base", 5000)]) 
(n#matrix_to_atom_1 = 5),
(n#matrix_to_atom_2 = 4),
(n#matrix_to_atom_3 = 3),
(n#matrix_to_atom_4 = 2),
(n#matrix_to_atom_5 = 1),
((n#matrix_to_atom_1 <= 4)) -> ((m#matrix_to_atom_1 = 1)),
((n#matrix_to_atom_2 <= 4)) -> ((m#matrix_to_atom_2 = 2)),
((n#matrix_to_atom_3 <= 4)) -> ((m#matrix_to_atom_3 = 3)) 

--

((n#matrix_to_atom_1 <= 4)) -> ((m#matrix_to_atom_1 = 1)), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__0) -> ((m#matrix_to_atom_1 = 1)) 
new variables:
  find __0: bool
new constraints:
  __0 =aux (n#matrix_to_atom_1 <= 4)
--

(__0) -> ((m#matrix_to_atom_1 = 1)), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
ReifyImply((m#matrix_to_atom_1 = 1), __0) 

--

__0 =aux (n#matrix_to_atom_1 <= 4), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify((n#matrix_to_atom_1 <= 4), __0) 

--

((n#matrix_to_atom_2 <= 4)) -> ((m#matrix_to_atom_2 = 2)), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__1) -> ((m#matrix_to_atom_2 = 2)) 
new variables:
  find __1: bool
new constraints:
  __1 =aux (n#matrix_to_atom_2 <= 4)
--

(__1) -> ((m#matrix_to_atom_2 = 2)), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
ReifyImply((m#matrix_to_atom_2 = 2), __1) 

--

__1 =aux (n#matrix_to_atom_2 <= 4), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify((n#matrix_to_atom_2 <= 4), __1) 

--

((n#matrix_to_atom_3 <= 4)) -> ((m#matrix_to_atom_3 = 3)), 
   ~~> flatten_imply ([("Minion", 4200)]) 
(__2) -> ((m#matrix_to_atom_3 = 3)) 
new variables:
  find __2: bool
new constraints:
  __2 =aux (n#matrix_to_atom_3 <= 4)
--

(__2) -> ((m#matrix_to_atom_3 = 3)), 
   ~~> introduce_reifyimply_ineq_from_imply ([("Minion", 4400)]) 
ReifyImply((m#matrix_to_atom_3 = 3), __2) 

--

__2 =aux (n#matrix_to_atom_3 <= 4), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify((n#matrix_to_atom_3 <= 4), __2) 

--

(n#matrix_to_atom_1 <= 4), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(n#matrix_to_atom_1, 4, 0) 

--

(n#matrix_to_atom_2 <= 4), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(n#matrix_to_atom_2, 4, 0) 

--

(n#matrix_to_atom_3 <= 4), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(n#matrix_to_atom_3, 4, 0) 

--

Final model:

find m: matrix indexed by [[int(1..5)]] of int(1..5)
find n: matrix indexed by [[int(1..5)]] of int(1..5)
find __0: bool
find __1: bool
find __2: bool
find m#matrix_to_atom_1: int(1..5)
find m#matrix_to_atom_2: int(1..5)
find m#matrix_to_atom_3: int(1..5)
find m#matrix_to_atom_4: int(1..5)
find m#matrix_to_atom_5: int(1..5)
find n#matrix_to_atom_1: int(1..5)
find n#matrix_to_atom_2: int(1..5)
find n#matrix_to_atom_3: int(1..5)
find n#matrix_to_atom_4: int(1..5)
find n#matrix_to_atom_5: int(1..5)

such that

(n#matrix_to_atom_1 = 5),
(n#matrix_to_atom_2 = 4),
(n#matrix_to_atom_3 = 3),
(n#matrix_to_atom_4 = 2),
(n#matrix_to_atom_5 = 1),
ReifyImply((m#matrix_to_atom_1 = 1), __0),
ReifyImply((m#matrix_to_atom_2 = 2), __1),
ReifyImply((m#matrix_to_atom_3 = 3), __2),
Reify(Ineq(n#matrix_to_atom_1, 4, 0), __0),
Reify(Ineq(n#matrix_to_atom_2, 4, 0), __1),
Reify(Ineq(n#matrix_to_atom_3, 4, 0), __2)

clauses:



