Model before rewriting:

find x: bool

such that

(x = allDiff([given x: int(1..10)

such that

x
 | x: int(1..10),(x % 2 = 0)]))

--

(x = allDiff([given x: int(1..10)

such that

x
 | x: int(1..10),(x % 2 = 0)])), 
   ~~> bool_eq_to_reify ([("Minion", 4400)]) 
Reify(allDiff([given x: int(1..10)

such that

x
 | x: int(1..10),(x % 2 = 0)]), x) 

--

Model before rewriting:

find x: int(1..10)

such that

(x % 2 = 0)

--

x % 2, 
   ~~> mod_to_bubble ([("Bubble", 6000)]) 
{SafeMod(x,2) @ (2 != 0)} 

--

({SafeMod(x,2) @ (2 != 0)} = 0), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(SafeMod(x,2) = 0) 

--

(SafeMod(x,2) = 0), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(x, 2, 0) 

--

Final model:

find x: int(1..10)

such that

ModEq(x, 2, 0)

Model before rewriting:

given x: int(1..10)

such that

x

--

Final model:

given x: int(1..10)

such that

x

[given x: int(1..10)

such that

x
 | x: int(1..10),(x % 2 = 0)], 
   ~~> expand_comprehension ([("Base", 2000)]) 
[2,4,6,8,10;int(1..)] 

--

Reify(allDiff([2,4,6,8,10;int(1..)]), x), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
Reify(true, x) 

--

Final model:

find x: bool

such that

Reify(true, x)

