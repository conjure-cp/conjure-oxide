Model before rewriting:

find x: int(2..4)
find y: int(2..4)
find z: int(2..4)

such that

(sum([sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]);int(1..2)]),z;int(1..2)]) < 14)

clauses:



--

sum([sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]);int(1..2)]),z;int(1..2)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)]) 

--

(sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)]) < 14), 
   ~~> lt_to_leq ([("Minion", 8400)]) 
(sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)]) <= sum([14,-1;int(1..)])) 

--

(sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)]) <= sum([14,-1;int(1..)])), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)]) <= 13) 

--

(sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)]) <= 13), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__0 <= 13) 
new variables:
  find __0: int(12..24)
new constraints:
  __0 =aux sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)])
--

(__0 <= 13), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__0, 13, 0) 

--

sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
sum([product([2,x;int(1..2)]),product([3,y;int(1..2)]),z;int(1..)]) 

--

product([2,x;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
product([2,x;int(1..)]) 

--

product([3,y;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
product([3,y;int(1..)]) 

--

__0 =aux sum([product([2,x;int(1..)]),product([3,y;int(1..)]),z;int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([FlatWeightedSumLeq([2, 3, 1],[x, y, z],__0),FlatWeightedSumGeq([2, 3, 1],[x, y, z],__0);int(1..)]) 

--

Ineq(__0, 13, 0),
and([FlatWeightedSumLeq([2, 3, 1],[x, y, z],__0),FlatWeightedSumGeq([2, 3, 1],[x, y, z],__0);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
Ineq(__0, 13, 0),
FlatWeightedSumLeq([2, 3, 1],[x, y, z],__0),
FlatWeightedSumGeq([2, 3, 1],[x, y, z],__0) 

--

Final model:

find x: int(2..4)
find y: int(2..4)
find z: int(2..4)
find __0: int(12..24)

such that

Ineq(__0, 13, 0),
FlatWeightedSumLeq([2, 3, 1],[x, y, z],__0),
FlatWeightedSumGeq([2, 3, 1],[x, y, z],__0)

clauses:



