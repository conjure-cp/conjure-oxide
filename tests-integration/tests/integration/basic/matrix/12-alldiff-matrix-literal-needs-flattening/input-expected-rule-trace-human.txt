Model before rewriting:

find i: int(1..2)
find j: int(1..3)

such that

allDiff([(product([j,2;int(1..2)]) - 1),2,3,UnsafeDiv(i, 2),6;int(1..5)])

clauses:



--

product([j,2;int(1..2)]), 
   ~~> reorder_product ([("Base", 8800)]) 
product([2,j;int(1..2)]) 

--

(product([2,j;int(1..2)]) - 1), 
   ~~> minus_to_sum ([("Base", 8400)]) 
sum([product([2,j;int(1..2)]),-(1);int(1..)]) 

--

allDiff([sum([product([2,j;int(1..2)]),-(1);int(1..)]),2,3,UnsafeDiv(i, 2),6;int(1..5)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff([sum([product([2,j;int(1..2)]),-1;int(1..)]),2,3,UnsafeDiv(i, 2),6;int(1..5)]) 

--

UnsafeDiv(i, 2), 
   ~~> div_to_bubble ([("Bubble", 6000)]) 
{SafeDiv(i, 2) @ (2 != 0)} 

--

allDiff([sum([product([2,j;int(1..2)]),-1;int(1..)]),2,3,{SafeDiv(i, 2) @ (2 != 0)},6;int(1..5)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff([sum([product([2,j;int(1..2)]),-1;int(1..)]),2,3,SafeDiv(i, 2),6;int(1..5)]) 

--

allDiff([sum([product([2,j;int(1..2)]),-1;int(1..)]),2,3,SafeDiv(i, 2),6;int(1..5)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
allDiff([sum([product([2,j;int(1..2)]),-1;int(1..)]),2,3,SafeDiv(i, 2),6;int(1..)]) 

--

product([2,j;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
product([2,j;int(1..)]) 

--

allDiff([sum([product([2,j;int(1..)]),-1;int(1..)]),2,3,SafeDiv(i, 2),6;int(1..)]), 
   ~~> flatten_matrix_literal ([("Minion", 1000)]) 
allDiff([__0,2,3,__1,6;int(1..)]) 
new variables:
  find __0: int(1..5)
  find __1: int(0..1)
new constraints:
  __0 =aux sum([product([2,j;int(1..)]),-1;int(1..)])
  __1 =aux SafeDiv(i, 2)
--

__0 =aux sum([product([2,j;int(1..)]),-1;int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([FlatWeightedSumLeq([1, 2],[-1, j],__0),FlatWeightedSumGeq([1, 2],[-1, j],__0);int(1..)]) 

--

allDiff([__0,2,3,__1,6;int(1..)]),
and([FlatWeightedSumLeq([1, 2],[-1, j],__0),FlatWeightedSumGeq([1, 2],[-1, j],__0);int(1..)]),
__1 =aux SafeDiv(i, 2), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
allDiff([__0,2,3,__1,6;int(1..)]),
FlatWeightedSumLeq([1, 2],[-1, j],__0),
FlatWeightedSumGeq([1, 2],[-1, j],__0),
__1 =aux SafeDiv(i, 2) 

--

allDiff([__0,2,3,__1,6;int(1..)]), 
   ~~> introduce_flat_alldiff ([("Minion", 4200)]) 
__flat_alldiff([__0, 2, 3, __1, 6]) 

--

__1 =aux SafeDiv(i, 2), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(i, 2, __1) 

--

Final model:

find i: int(1..2)
find j: int(1..3)
find __0: int(1..5)
find __1: int(0..1)

such that

__flat_alldiff([__0, 2, 3, __1, 6]),
FlatWeightedSumLeq([1, 2],[-1, j],__0),
FlatWeightedSumGeq([1, 2],[-1, j],__0),
DivEq(i, 2, __1)

clauses:



