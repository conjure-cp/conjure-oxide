Model before rewriting:

find i: int(1..2)
find j: int(1..3)

such that

([j,2,3,4,UnsafeDiv(j, 2),6;int(1..6)][i] = i)

clauses:



--

[j,2,3,4,UnsafeDiv(j, 2),6;int(1..6)][i], 
   ~~> index_to_bubble ([("Bubble", 6000)]) 
{[j,2,3,4,UnsafeDiv(j, 2),6;int(1..6)][i] @ and([__inDomain(i,int(1..6));int(1..)])} 

--

({[j,2,3,4,UnsafeDiv(j, 2),6;int(1..6)][i] @ and([__inDomain(i,int(1..6));int(1..)])} = i), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
([j,2,3,4,UnsafeDiv(j, 2),6;int(1..6)][i] = i) 

--

UnsafeDiv(j, 2), 
   ~~> div_to_bubble ([("Bubble", 6000)]) 
{SafeDiv(j, 2) @ (2 != 0)} 

--

([j,2,3,4,{SafeDiv(j, 2) @ (2 != 0)},6;int(1..6)][i] = i), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
([j,2,3,4,SafeDiv(j, 2),6;int(1..6)][i] = i) 

--

[j,2,3,4,SafeDiv(j, 2),6;int(1..6)][i], 
   ~~> matrix_to_list ([("Base", 2000)]) 
[j,2,3,4,SafeDiv(j, 2),6;int(1..)][i] 

--

[j,2,3,4,SafeDiv(j, 2),6;int(1..)][i], 
   ~~> flatten_matrix_literal ([("Minion", 1000)]) 
[j,2,3,4,__0,6;int(1..)][i] 
new variables:
  find __0: int(0..1)
new constraints:
  __0 =aux SafeDiv(j, 2)
--

([j,2,3,4,__0,6;int(1..)][i] = i), 
   ~~> introduce_element_from_index ([("Minion", 4400)]) 
__minion_element_one([j,2,3,4,__0,6],i,i) 

--

__0 =aux SafeDiv(j, 2), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(j, 2, __0) 

--

Final model:

find i: int(1..2)
find j: int(1..3)
find __0: int(0..1)

such that

__minion_element_one([j,2,3,4,__0,6],i,i),
DivEq(j, 2, __0)

clauses:



