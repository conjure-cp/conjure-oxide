Model before rewriting:

find a: int(1..2)
find b: int(4..7)

such that

(min([a,b;int(1..2)]) >= 3)

clauses:



--

(min([a,b;int(1..2)]) >= 3), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__0 >= 3) 
new variables:
  find __0: int(1..2)
new constraints:
  __0 =aux min([a,b;int(1..2)])
--

(__0 >= 3), 
   ~~> geq_to_ineq ([("Minion", 4100)]) 
Ineq(3, __0, 0) 

--

min([a,b;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
min([a,b;int(1..)]) 

--

min([a,b;int(1..)]), 
   ~~> min_to_var ([("Base", 6000)]) 
__1 
new variables:
  find __1: int(1..2)
new constraints:
  (__1 <= a)
  (__1 <= b)
  or([(__1 = a),(__1 = b);int(1..)])
--

(__1 <= a), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__1, a, 0) 

--

(__1 <= b), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(__1, b, 0) 

--

Final model:

find a: int(1..2)
find b: int(4..7)
find __0: int(1..2)
find __1: int(1..2)

such that

Ineq(3, __0, 0),
__0 =aux __1,
Ineq(__1, a, 0),
Ineq(__1, b, 0),
or([(__1 = a),(__1 = b);int(1..)])

clauses:



