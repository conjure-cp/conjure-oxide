Model before rewriting:

find x: int(1..3)
find y: int(1..3)

such that

(x <= sum([y,2;int(1..2)]))

clauses:



--

(x <= sum([y,2;int(1..2)])), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(x <= __0) 
new variables:
  find __0: int(3..5)
new constraints:
  __0 =aux sum([y,2;int(1..2)])
--

(x <= __0), 
   ~~> leq_to_ineq ([("Minion", 4100)]) 
Ineq(x, __0, 0) 

--

sum([y,2;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
sum([y,2;int(1..)]) 

--

__0 =aux sum([y,2;int(1..)]), 
   ~~> introduce_weighted_sumleq_sumgeq ([("Minion", 4600)]) 
and([SumLeq([2, y], __0),SumGeq([2, y], __0);int(1..)]) 

--

Ineq(x, __0, 0),
and([SumLeq([2, y], __0),SumGeq([2, y], __0);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
Ineq(x, __0, 0),
SumLeq([2, y], __0),
SumGeq([2, y], __0) 

--

Final model:

find x: int(1..3)
find y: int(1..3)
find __0: int(3..5)

such that

Ineq(x, __0, 0),
SumLeq([2, y], __0),
SumGeq([2, y], __0)

clauses:



