Model before rewriting:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)

such that

(UnsafeDiv(x, UnsafeDiv(y, z)) = 10)

--

UnsafeDiv(y, z), 
   ~~> div_to_bubble ([("Bubble", 6000)]) 
{SafeDiv(y, z) @ (z != 0)} 

--

UnsafeDiv(x, {SafeDiv(y, z) @ (z != 0)}), 
   ~~> bubble_up ([("Bubble", 8800)]) 
{UnsafeDiv(x, SafeDiv(y, z)) @ (z != 0)} 

--

({UnsafeDiv(x, SafeDiv(y, z)) @ (z != 0)} = 10), 
   ~~> bubble_up ([("Bubble", 8800)]) 
{(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ (z != 0)} 

--

{(UnsafeDiv(x, SafeDiv(y, z)) = 10) @ (z != 0)}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(UnsafeDiv(x, SafeDiv(y, z)) = 10),(z != 0);int(1..)]) 

--

and([(UnsafeDiv(x, SafeDiv(y, z)) = 10),(z != 0);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(UnsafeDiv(x, SafeDiv(y, z)) = 10),
(z != 0) 

--

UnsafeDiv(x, SafeDiv(y, z)), 
   ~~> div_to_bubble ([("Bubble", 6000)]) 
{SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)} 

--

({SafeDiv(x, SafeDiv(y, z)) @ (SafeDiv(y, z) != 0)} = 10), 
   ~~> bubble_up ([("Bubble", 8800)]) 
{(SafeDiv(x, SafeDiv(y, z)) = 10) @ (SafeDiv(y, z) != 0)} 

--

{(SafeDiv(x, SafeDiv(y, z)) = 10) @ (SafeDiv(y, z) != 0)}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(SafeDiv(x, SafeDiv(y, z)) = 10),(SafeDiv(y, z) != 0);int(1..)]) 

--

and([(SafeDiv(x, SafeDiv(y, z)) = 10),(SafeDiv(y, z) != 0);int(1..)]),
(z != 0), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
(SafeDiv(x, SafeDiv(y, z)) = 10),
(SafeDiv(y, z) != 0),
(z != 0) 

--

SafeDiv(x, SafeDiv(y, z)), 
   ~~> flatten_generic ([("Minion", 4200)]) 
SafeDiv(x, __0) 
new variables:
  find __0: int(0..5)
new constraints:
  __0 =aux SafeDiv(y, z)
--

(SafeDiv(x, __0) = 10), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(x, __0, 10) 

--

(SafeDiv(y, z) != 0), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__1 != 0) 
new variables:
  find __1: int(0..5)
new constraints:
  __1 =aux SafeDiv(y, z)
--

__0 =aux SafeDiv(y, z), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(y, z, __0) 

--

__1 =aux SafeDiv(y, z), 
   ~~> introduce_diveq ([("Minion", 4200)]) 
DivEq(y, z, __1) 

--

Final model:

find x: int(5..20)
find y: int(0..5)
find z: int(0..6)
find __0: int(0..5)
find __1: int(0..5)

such that

DivEq(x, __0, 10),
(__1 != 0),
(z != 0),
DivEq(y, z, __0),
DivEq(y, z, __1)

