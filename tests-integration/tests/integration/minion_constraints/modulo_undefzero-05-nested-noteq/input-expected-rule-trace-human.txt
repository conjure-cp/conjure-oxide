Model before rewriting:

find x: int(5..7)
find y: int(0..3)
find z: int(0..4)

such that

!((x % y % z = 3))

clauses:



--

y % z, 
   ~~> mod_to_bubble ([("Bubble", 6000)]) 
{SafeMod(y,z) @ (z != 0)} 

--

x % {SafeMod(y,z) @ (z != 0)}, 
   ~~> bubble_up ([("Bubble", 8800)]) 
{x % SafeMod(y,z) @ (z != 0)} 

--

({x % SafeMod(y,z) @ (z != 0)} = 3), 
   ~~> bubble_up ([("Bubble", 8800)]) 
{(x % SafeMod(y,z) = 3) @ (z != 0)} 

--

{(x % SafeMod(y,z) = 3) @ (z != 0)}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(x % SafeMod(y,z) = 3),(z != 0);int(1..)]) 

--

x % SafeMod(y,z), 
   ~~> mod_to_bubble ([("Bubble", 6000)]) 
{SafeMod(x,SafeMod(y,z)) @ (SafeMod(y,z) != 0)} 

--

({SafeMod(x,SafeMod(y,z)) @ (SafeMod(y,z) != 0)} = 3), 
   ~~> bubble_up ([("Bubble", 8800)]) 
{(SafeMod(x,SafeMod(y,z)) = 3) @ (SafeMod(y,z) != 0)} 

--

{(SafeMod(x,SafeMod(y,z)) = 3) @ (SafeMod(y,z) != 0)}, 
   ~~> expand_bubble ([("Bubble", 8900)]) 
and([(SafeMod(x,SafeMod(y,z)) = 3),(SafeMod(y,z) != 0);int(1..)]) 

--

and([and([(SafeMod(x,SafeMod(y,z)) = 3),(SafeMod(y,z) != 0);int(1..)]),(z != 0);int(1..)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
and([(SafeMod(x,SafeMod(y,z)) = 3),(SafeMod(y,z) != 0),(z != 0);int(1..)]) 

--

!(and([(SafeMod(x,SafeMod(y,z)) = 3),(SafeMod(y,z) != 0),(z != 0);int(1..)])), 
   ~~> distribute_not_over_and ([("Base", 8400)]) 
or([!((SafeMod(x,SafeMod(y,z)) = 3)),!((SafeMod(y,z) != 0)),!((z != 0));int(1..)]) 

--

!((SafeMod(x,SafeMod(y,z)) = 3)), 
   ~~> negated_eq_to_neq ([("Base", 8800)]) 
(SafeMod(x,SafeMod(y,z)) != 3) 

--

!((SafeMod(y,z) != 0)), 
   ~~> negated_neq_to_eq ([("Base", 8800)]) 
(SafeMod(y,z) = 0) 

--

!((z != 0)), 
   ~~> negated_neq_to_eq ([("Base", 8800)]) 
(z = 0) 

--

(SafeMod(x,SafeMod(y,z)) != 3), 
   ~~> flatten_generic ([("Minion", 4200)]) 
(__0 != 3) 
new variables:
  find __0: int(0..2)
new constraints:
  __0 =aux SafeMod(x,SafeMod(y,z))
--

(SafeMod(y,z) = 0), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(y, z, 0) 

--

SafeMod(x,SafeMod(y,z)), 
   ~~> flatten_generic ([("Minion", 4200)]) 
SafeMod(x,__1) 
new variables:
  find __1: int(0..3)
new constraints:
  __1 =aux SafeMod(y,z)
--

__0 =aux SafeMod(x,__1), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(x, __1, __0) 

--

__1 =aux SafeMod(y,z), 
   ~~> introduce_modeq ([("Minion", 4200)]) 
ModEq(y, z, __1) 

--

Final model:

find x: int(5..7)
find y: int(0..3)
find z: int(0..4)
find __0: int(0..2)
find __1: int(0..3)

such that

or([(__0 != 3),ModEq(y, z, 0),(z = 0);int(1..)]),
ModEq(x, __1, __0),
ModEq(y, z, __1)

clauses:



