Model before rewriting:

find a: bool
find b: bool
find c: bool

such that

and([and([and([or([a,b;int(1..2)]),or([!(a),b;int(1..2)]);int(1..2)]),or([a,!(b);int(1..2)]);int(1..2)]),or([!(c),c;int(1..2)]);int(1..2)])

--

and([and([and([or([a,b;int(1..2)]),or([!(a),b;int(1..2)]);int(1..2)]),or([a,!(b);int(1..2)]);int(1..2)]),or([!(c),c;int(1..2)]);int(1..2)]), 
   ~~> normalise_associative_commutative ([("Base", 8900)]) 
and([or([a,b;int(1..2)]),or([!(a),b;int(1..2)]),or([a,!(b);int(1..2)]),or([!(c),c;int(1..2)]);int(1..2)]) 

--

!(a), 
   ~~> not_literal_to_wliteral ([("Minion", 4100)]) 
WatchedLiteral(a,false) 

--

!(b), 
   ~~> not_literal_to_wliteral ([("Minion", 4100)]) 
WatchedLiteral(b,false) 

--

!(c), 
   ~~> not_literal_to_wliteral ([("Minion", 4100)]) 
WatchedLiteral(c,false) 

--

and([or([a,b;int(1..2)]),or([WatchedLiteral(a,false),b;int(1..2)]),or([a,WatchedLiteral(b,false);int(1..2)]),or([WatchedLiteral(c,false),c;int(1..2)]);int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
and([or([a,b;int(1..2)]),or([WatchedLiteral(a,false),b;int(1..2)]),or([a,WatchedLiteral(b,false);int(1..2)]),or([WatchedLiteral(c,false),c;int(1..2)]);int(1..)]) 

--

and([or([a,b;int(1..2)]),or([WatchedLiteral(a,false),b;int(1..2)]),or([a,WatchedLiteral(b,false);int(1..2)]),or([WatchedLiteral(c,false),c;int(1..2)]);int(1..)]), 
   ~~> constant_evaluator ([("Constant", 9001)]) 
or([a,b;int(1..2)]),
or([WatchedLiteral(a,false),b;int(1..2)]),
or([a,WatchedLiteral(b,false);int(1..2)]),
or([WatchedLiteral(c,false),c;int(1..2)]) 

--

or([a,b;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
or([a,b;int(1..)]) 

--

or([WatchedLiteral(a,false),b;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
or([WatchedLiteral(a,false),b;int(1..)]) 

--

or([a,WatchedLiteral(b,false);int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
or([a,WatchedLiteral(b,false);int(1..)]) 

--

or([WatchedLiteral(c,false),c;int(1..2)]), 
   ~~> matrix_to_list ([("Base", 2000)]) 
or([WatchedLiteral(c,false),c;int(1..)]) 

--

Final model:

find a: bool
find b: bool
find c: bool

such that

or([a,b;int(1..)]),
or([WatchedLiteral(a,false),b;int(1..)]),
or([a,WatchedLiteral(b,false);int(1..)]),
or([WatchedLiteral(c,false),c;int(1..)])

