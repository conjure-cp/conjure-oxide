Model before rewriting:

find a: bool
find b: bool

such that

and([or([a,b;int(1..2)]),or([Not(a),b;int(1..2)]);int(1..2)])

clauses:



--

Not(a), 
   ~~> apply_tseytin_not ([("SAT", 9005)]) 
__0 
new variables:
  find __0: bool
new clauses:
  Clause([Not(a),Not(__0);int(1..)])
  Clause([a,__0;int(1..)])
--

or([a,b;int(1..2)]), 
   ~~> apply_tseytin_and_or ([("SAT", 8500)]) 
__1 
new variables:
  find __1: bool
new clauses:
  Clause([Not(a),__1;int(1..)])
  Clause([Not(b),__1;int(1..)])
  Clause([Not(__1),a,b;int(1..)])
--

or([__0,b;int(1..2)]), 
   ~~> apply_tseytin_and_or ([("SAT", 8500)]) 
__2 
new variables:
  find __2: bool
new clauses:
  Clause([Not(__0),__2;int(1..)])
  Clause([Not(b),__2;int(1..)])
  Clause([Not(__2),__0,b;int(1..)])
--

and([__1,__2;int(1..2)]), 
   ~~> apply_tseytin_and_or ([("SAT", 8500)]) 
__3 
new variables:
  find __3: bool
new clauses:
  Clause([Not(__3),__1;int(1..)])
  Clause([Not(__3),__2;int(1..)])
  Clause([__3,Not(__1),Not(__2);int(1..)])
--

Final model:

find a: bool
find b: bool
find __0: bool
find __1: bool
find __2: bool
find __3: bool

such that

__3

clauses:

Clause([Not(a),Not(__0);int(1..)]),
Clause([a,__0;int(1..)]),
Clause([Not(a),__1;int(1..)]),
Clause([Not(b),__1;int(1..)]),
Clause([Not(__1),a,b;int(1..)]),
Clause([Not(__0),__2;int(1..)]),
Clause([Not(b),__2;int(1..)]),
Clause([Not(__2),__0,b;int(1..)]),
Clause([Not(__3),__1;int(1..)]),
Clause([Not(__3),__2;int(1..)]),
Clause([__3,Not(__1),Not(__2);int(1..)])

