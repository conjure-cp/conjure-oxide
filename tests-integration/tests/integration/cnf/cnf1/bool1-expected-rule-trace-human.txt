Model before rewriting:

find a: bool
find b: bool

such that

and([or([a,b;int(1..2)]),or([!(a),b;int(1..2)]);int(1..2)])

clauses:



--

!(a), 
   ~~> apply_tseytin_not ([("SAT", 9005)]) 
__0 
new variables:
  find __0: bool
new clauses:
  (¬a \/ ¬__0)
  (a \/ __0)
--

or([a,b;int(1..2)]), 
   ~~> apply_tseytin_and_or ([("SAT", 8500)]) 
__1 
new variables:
  find __1: bool
new clauses:
  (¬a \/ __1)
  (¬b \/ __1)
  (¬__1 \/ a \/ b)
--

or([__0,b;int(1..2)]), 
   ~~> apply_tseytin_and_or ([("SAT", 8500)]) 
__2 
new variables:
  find __2: bool
new clauses:
  (¬__0 \/ __2)
  (¬b \/ __2)
  (¬__2 \/ __0 \/ b)
--

and([__1,__2;int(1..2)]), 
   ~~> apply_tseytin_and_or ([("SAT", 8500)]) 
__3 
new variables:
  find __3: bool
new clauses:
  (¬__3 \/ __1)
  (¬__3 \/ __2)
  (__3 \/ ¬__1 \/ ¬__2)
--

__3, 
   ~~> remove_single_atom ([("SAT", 8400)]) 
true 

new clauses:
  (__3)
--

Final model:

find a: bool
find b: bool
find __0: bool
find __1: bool
find __2: bool
find __3: bool

such that

true

clauses:

(¬a \/ ¬__0),
(a \/ __0),
(¬a \/ __1),
(¬b \/ __1),
(¬__1 \/ a \/ b),
(¬__0 \/ __2),
(¬b \/ __2),
(¬__2 \/ __0 \/ b),
(¬__3 \/ __1),
(¬__3 \/ __2),
(__3 \/ ¬__1 \/ ¬__2),
(__3)

