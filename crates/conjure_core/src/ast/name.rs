use std::fmt::Display;

use serde::{Deserialize, Serialize};

/// A reference to an object stored in the [`SymbolTable`].
#[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Name {
    /// A name given in the input model.
    User(String),
    /// A name generated by Conjure-Oxide.
    Machine(i32),

    /// A representation variable.
    Represented(
        // box these fields to make the size of name smaller
        // this in turn makes the size of atom, expression, domain, ... smaller
        Box<(
            // The source variable
            Name,
            // The representation rule used
            String,
            // Additional, rule dependent, information
            String,
        )>,
    ),

    WithRepresentation(
        Box<Name>,
        /// representations chosen
        Vec<String>,
    ),
}

uniplate::derive_unplateable!(Name);

impl Display for Name {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Name::User(s) => write!(f, "{}", s),
            Name::Machine(i) => write!(f, "__{}", i),
            Name::Represented(fields) => {
                let (name, rule_string, suffix) = fields.as_ref();
                write!(f, "{name}#{rule_string}_{suffix}")
            }
            Name::WithRepresentation(name, items) => {
                // TODO: what is the correct syntax for nested reprs?
                write!(f, "{name}#{}", items.join("#"))
            }
        }
    }
}

impl From<String> for Name {
    fn from(s: String) -> Self {
        Name::User(s)
    }
}

impl From<&str> for Name {
    fn from(s: &str) -> Self {
        Name::User(s.to_string())
    }
}

impl From<i32> for Name {
    fn from(i: i32) -> Self {
        Name::Machine(i)
    }
}
